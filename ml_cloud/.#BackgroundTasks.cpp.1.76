#include "api.h"
#include "main.h"
#include "../ml_pmp/pmp.h"
#include "../nu/threadpool/TimerHandle.h"
#include "BackgroundTasks.h"
#include <api/service/waServiceFactory.h>
#include "../Agave/DecodeFile/svc_raw_media_reader.h"
#include "nswasabi/ReferenceCounted.h"
#include "../replicant/cloud/ifc_clouddb.h"
#include "nx/nxsleep.h"
#include "resource.h"
#include "../Wasabi2/main.h"
#include <strsafe.h>

extern Cloud_Background cloud_background;

Cloud_Background::Cloud_Background()
{
	background_thread=0;
	db_connection=0;
	killswitch=0;
	first_pull=0;
	load_attempts=0;
	mediahash_ids=0;
	num_mediahash_ids=0;
	mediahash_itr=0;
}

Cloud_Background::~Cloud_Background()
{
	if (db_connection)
		db_connection->Release();
	if (mediahash_ids)
		free(mediahash_ids);
}

void Cloud_Background::Kill()
{
	killswitch=1;
	AGAVE_API_THREADPOOL->RunFunction(background_thread, Background_Run, this, 0, 0);
}

void Cloud_Background::Rescan(bool missing_only)
{
	// trigger a local library rescan
	Config_SetLastScan(-1 - missing_only);
	add_timer.Cancel();
	add_timer.Wait(1000);
}

void Cloud_Background::OnReset()
{
	// TODO: benski> stop cloudclient

	// if ok then make sure revision is reset
	// as we otherwise get "rev ahead" errors
	db_connection->BeginTransaction();
	db_connection->Reset_All();
	db_connection->Commit();

	Config_SetLastScan(0);

	// TODO: benski> start cloudclient

	if (mediahash_ids)
		free(mediahash_ids);
	mediahash_ids = 0;

	// wait a bit before we start to re-scan so everything settles
	add_timer.Cancel();
	add_timer.Wait(1000);
}

void Cloud_Background::OnFirstPull(int clean, bool forced)
{
	// if we've done a first run / complete re-pull then do a compact of the db
	if (clean) db_connection->Compact();

	// setup recurring events to keep us reasonably in sync from continued usage
	first_pull=1;
	add_timer.Cancel();
	add_timer.Wait(1000);

	DebugConsole_SetStatus(WASABI_API_LNGSTRINGW((!forced ? IDS_FIRST_PULL_COMPLETED : IDS_FORCED_PULL_COMPLETED)));
	DebugConsole_ShowProgess(0);
}

int Cloud_Background::Background_Run(HANDLE handle, void *user_data, intptr_t id)
{
	Cloud_Background *background = (Cloud_Background *)user_data;

	if (background->killswitch)
	{
		AGAVE_API_THREADPOOL->RemoveHandle(background->background_thread, background->add_timer);
		AGAVE_API_THREADPOOL->RemoveHandle(background->background_thread, background->login_timer);
		AGAVE_API_THREADPOOL->RemoveHandle(background->background_thread, background->media_timer);
		return 1;
	}
	else
	{
		if (!background->Internal_Initialize())
		{
			// as loading order can change / be delayed, attempt to try a few times before failing
			if (background->load_attempts < 5)
			{
				background->load_attempts++;
				NXSleep(1000);
				AGAVE_API_THREADPOOL->RunFunction(background->background_thread, background->Background_Run, background, 0, 0);
			}
			return 1;
		}
	}

	return 0;
}

int Cloud_Background::Background_Add(HANDLE handle, void *user_data, intptr_t id)
{
	Cloud_Background *background = (Cloud_Background *)user_data;
	if (background->killswitch) return 1;

	wchar_t err_msg[1024];
	itemRecordW *record = (itemRecordW *)id;
	ns_error_t ret = AddFileToLibrary(background->db_connection, background->attributes, record);
	if (ret == NErr_Success)
	{
		StringCchPrintfW(err_msg, 1024, WASABI_API_LNGSTRINGW(IDS_ADDING_X), record->filename);
	}
	else
	{
		StringCchPrintfW(err_msg, 1024, WASABI_API_LNGSTRINGW(IDS_ADD_FAILED), ret, record->filename);
	}
	DebugConsole_SetStatus(err_msg);
	AGAVE_API_MLDB->FreeRecord(record);

	return 1;
}

int Cloud_Background::Background_Remove(HANDLE handle, void *user_data, intptr_t id)
{
	Cloud_Background *background = (Cloud_Background *)user_data;
	if (background->killswitch) return 1;

	nx_uri_t filename = (nx_uri_t)id;

	int internal_id = 0, is_ignored = 0;
	if (background->db_connection->Media_FindByFilename(filename, local_device_id, &internal_id, &is_ignored) == NErr_Success)
	{
		background->db_connection->Media_Delete(internal_id);
		background->db_connection->IDMap_Remove(internal_id);
	}

	if (cloud_client)
		cloud_client->Flush();

	NXURIRelease(filename);
	return 1;
}

int Cloud_Background::Background_Update(HANDLE handle, void *user_data, intptr_t id)
{
	Cloud_Background *background = (Cloud_Background *)user_data;
	if (background->killswitch) return 1;

	nx_uri_t filename = (nx_uri_t)id;

	wchar_t err_msg[1024];
	int internal_id = 0, is_ignored = 0;
	if (background->db_connection->Media_FindByFilename(filename, local_device_id, &internal_id, &is_ignored) == NErr_Success && is_ignored==0)
	{
		background->db_connection->BeginTransaction();
		UpdateFile(background->db_connection, background->attributes, internal_id, filename->string);
		background->db_connection->Commit();

		StringCchPrintfW(err_msg, 1024, WASABI_API_LNGSTRINGW(IDS_METADATA_CHANGED), filename->string);
		DebugConsole_SetStatus(err_msg);
	}
	else
	{
		StringCchPrintfW(err_msg, 1024, WASABI_API_LNGSTRINGW(IDS_IGNORE_METADATA_CHANGE), filename->string);
		DebugConsole_SetStatus(err_msg);
	}

	if (cloud_client)
		cloud_client->Flush();

	NXURIRelease(filename);
	return 1;
}

#define RegisterAttribute(x) db_connection->Attribute_Add(#x, &attributes. ## x)
bool Cloud_Background::Internal_Initialize()
{
	if (!REPLICANT_API_CLOUD)
	{
		// as loading order can change / be delayed, attempt to try a few times before failing
		if (this->load_attempts == 5)
		{
			DebugConsole_SetStatus(WASABI_API_LNGSTRINGW(IDS_CRITICAL_ERROR));
		}
		return false;
	}

	DebugConsole_SetStatus(WASABI_API_LNGSTRINGW(IDS_INIT_DB));
	REPLICANT_API_CLOUD->CreateDatabaseConnection(&db_connection, local_device_token);

	attributes.device_token = NXStringRetain(local_device_token);

	db_connection->BeginTransaction();
	RegisterAttribute(artist);
	RegisterAttribute(album);
	RegisterAttribute(trackno);
	RegisterAttribute(title);
	RegisterAttribute(albumartist);
	RegisterAttribute(bpm);
	RegisterAttribute(category);
	RegisterAttribute(comment);
	RegisterAttribute(composer);
	RegisterAttribute(director);
	RegisterAttribute(disc);
	RegisterAttribute(discs);
	RegisterAttribute(genre);
	RegisterAttribute(producer);
	RegisterAttribute(publisher);
	RegisterAttribute(tracks);
	RegisterAttribute(year);
	RegisterAttribute(albumgain);
	RegisterAttribute(trackgain);
	RegisterAttribute(rating);
	RegisterAttribute(type);
	RegisterAttribute(lossless);
	RegisterAttribute(mime);
	RegisterAttribute(idhash);

	db_connection->Commit();

	AGAVE_API_THREADPOOL->AddHandle(background_thread, add_timer, Background_AddFiles, this, 0, 0);
	AGAVE_API_THREADPOOL->AddHandle(background_thread, login_timer, Background_CheckLogin, this, 0, 0);
	AGAVE_API_THREADPOOL->AddHandle(background_thread, media_timer, Background_MediaHash, this, 0, 0);

	WASABI_API_SYSCB->syscb_registerCallback(this);
	login_timer.Poll(1000);
	return true;
}
#undef RegisterAttribute

int Cloud_Background::Background_AddFiles(HANDLE handle, void *user_data, intptr_t id)
{
	Cloud_Background *background = (Cloud_Background *)user_data;
	if (background->killswitch) return 1;

	if (!AddFilesToLibrary(background->db_connection, background->attributes, user_data))
	{
		AGAVE_API_THREADPOOL->RunFunction(background->background_thread, Background_MediaHash, user_data, 0, 0);
		background->add_timer.Cancel();
	}
	else
	{
		AGAVE_API_THREADPOOL->RunFunction(background->background_thread, Background_MediaHash, user_data, 0, 0);
		AGAVE_API_THREADPOOL->RunFunction(background->background_thread, Background_AddFiles, user_data, 0, 0);
	}

	return 1;
}

int Cloud_Background::Background_MediaHash(HANDLE handle, void *user_data, intptr_t id)
{
	Cloud_Background *background = (Cloud_Background *)user_data;
	if (background->killswitch) return 1;

	// TODO: let the thread process other things as we go.  
	// probably want to keep internal_ids and num_ids as a member variable.  and the counter
	if (background->mediahash_ids && background->mediahash_itr < background->num_mediahash_ids)
	{
		int internal_id = background->mediahash_ids[background->mediahash_itr++];
		DebugConsole_UpdateProgress(background->mediahash_itr, background->num_mediahash_ids);
		ReferenceCountedNXString media_hash, meta_hash, id_hash;
		ReferenceCountedNXURI filename_uri;
		if (background->db_connection->IDMap_Get_Filepath(internal_id, &filename_uri) == NErr_Success)
		{
			wchar_t err_msg[1024];
			StringCchPrintfW(err_msg, 1024, WASABI_API_LNGSTRINGW(IDS_CALCULATING_MEDIA_HASH), filename_uri->string);
			DebugConsole_SetStatus(err_msg);

			int compute_ret = ComputeMediaHash(filename_uri->string, &media_hash);
			if (compute_ret == NErr_Success)
			{
				background->db_connection->BeginTransaction();
				background->db_connection->IDMap_SetMediaHash(internal_id, media_hash);


				background->db_connection->IDMap_GetMetaHash(internal_id, &meta_hash);

				REPLICANT_API_CLOUD->ComputeIDHash(meta_hash, media_hash, &id_hash);
								int value_id;
				background->db_connection->Value_Add(background->attributes.idhash, id_hash, &value_id);
				background->db_connection->Media_AddAttributeValue(internal_id, background->attributes.idhash, value_id);
				background->db_connection->Commit();

				// do an announce every 32 tracks.  we can tune this
				if ((background->mediahash_itr & 31) == 0)
				{
					//DebugConsole_SetStatus(WASABI_API_LNGSTRINGW(IDS_ANNOUNCE_METADATA));
					if (cloud_client)
						cloud_client->Flush();
				}

				AGAVE_API_THREADPOOL->RunFunction(background->background_thread, Background_MediaHash, user_data, 0, 0);
				return 1;		
			}
			else
			{
				StringCchPrintfW(err_msg, 1024, WASABI_API_LNGSTRINGW(IDS_CALUCATING_MEDIA_HASH_FAILED), compute_ret, filename_uri->string);
				DebugConsole_SetStatus(err_msg);

				// flag file to be ignored from further re-processing attempts
				if (background->db_connection->IDMap_SetIgnore(internal_id) != NErr_Success)
					DebugConsole_SetStatus(WASABI_API_LNGSTRINGW(IDS_SET_IGNORE_FAILED));

				DebugConsole_UpdateIgnoredFiles();
			}
		}

		AGAVE_API_THREADPOOL->RunFunction(background->background_thread, Background_MediaHash, user_data, 0, 0);
	}
	else
	{
		if (cloud_client)
			cloud_client->Flush();
		if (background->mediahash_ids)
		{
			if (background->num_mediahash_ids)
				DebugConsole_SetStatus(WASABI_API_LNGSTRINGW(IDS_ANNOUNCE_METADATA));
			if (background->mediahash_ids)
			{
				try
				{
					free(background->mediahash_ids);
				}
				catch(...)
				{
				}
			}
			background->mediahash_ids = 0;
		}

		if (background->killswitch)
		{
			DebugConsole_ShowProgess(0);
			return 1;
		}

		if (background->db_connection->IDMap_Get_MediaHash_Null(&background->mediahash_ids, &background->num_mediahash_ids) == NErr_Success)
		{
			background->mediahash_itr = 0;
			// we only need to do the background add checking on loading so once done
			// we cancel though this will allow us to do one-off add checks later on
			background->add_timer.Cancel();

			if (background->num_mediahash_ids > 0)
			{
				wchar_t err_msg[1024];
				StringCchPrintfW(err_msg, 1024, WASABI_API_LNGSTRINGW(IDS_CALCULATING_MEDIA_HASH_FOR_FILES), background->num_mediahash_ids);
				DebugConsole_SetStatus(err_msg);

				AGAVE_API_THREADPOOL->RunFunction(background->background_thread, Background_MediaHash, user_data, 0, 0);
			}
			DebugConsole_ShowProgess(background->num_mediahash_ids);
			StatusWindow_Message((background->num_mediahash_ids > 0 ? IDS_STATUS_CALCULATING_MEDIA_HASH : 0));
		}
		else
		{
			DebugConsole_ShowProgess(0);
		}
	}

	return 1;
}

bool SetCredentials();
int Cloud_Background::Background_CheckLogin(HANDLE handle, void *user_data, intptr_t id)
{
	Cloud_Background *background = (Cloud_Background *)user_data;
	if (background->killswitch) return 1;

	DebugConsole_SetStatus(WASABI_API_LNGSTRINGW(IDS_WAITING_LOGIN));
	DebugConsole_ShowProgess(-1);
	StatusWindow_Message(IDS_STATUS_WAITING_LOGIN);
	if (SetCredentials())
	{
		background->login_timer.Cancel();

		DebugConsole_SetStatus(WASABI_API_LNGSTRINGW(!background->first_pull ? IDS_FIRST_PULL : IDS_PULLING));
		if (!background->first_pull)
		{
			DebugConsole_ShowProgess(-1);
			StatusWindow_Message(IDS_STATUS_FIRST_PULL);
		}

		// when the pull succeeds we'll have our OnFirstPull() called
		// at which point we'll start up the addfiles checking, etc
		cloud_client->Flush();
		return 1;
	}
	else
	{
		// change to a 5s delay after the initial 1s delay
		background->login_timer.Cancel();
		background->login_timer.Poll(5000);
	}
	return 0;
}

int Cloud_Background::Initialize()
{
	if (!background_thread)
	{
		DebugConsole_SetStatus(WASABI_API_LNGSTRINGW(IDS_STARTING_BG_THREAD));
		background_thread = AGAVE_API_THREADPOOL->ReserveThread(0);
		AGAVE_API_THREADPOOL->RunFunction(background_thread, Background_Run, this, 0, 0);
	}
	return NErr_Success;
}

void Cloud_Background::OnFileAdded(const wchar_t *filename)
{
	itemRecordW *record = AGAVE_API_MLDB->GetFile(filename);
	if (record)
	{
		AGAVE_API_THREADPOOL->RunFunction(background_thread, Background_Add, this, (intptr_t)record, 0);
		// wait a bit before we start to process the added files
		media_timer.Cancel();
		media_timer.Wait(1000);
	}
}

void Cloud_Background::OnFileUpdated(const wchar_t *filename, bool from_library)
{
	ReferenceCountedNXString nx_temp;
	nx_uri_t nx_filename;
	NXStringCreateWithUTF16(&nx_temp, filename);
	NXURICreateWithNXString(&nx_filename, nx_temp);
	AGAVE_API_THREADPOOL->RunFunction(background_thread, Background_Update, this, (intptr_t)nx_filename, 0);
}

void Cloud_Background::OnFileRemove_Post(const wchar_t *filename)
{
	ReferenceCountedNXString nx_temp;
	nx_uri_t nx_filename;
	NXStringCreateWithUTF16(&nx_temp, filename);
	NXURICreateWithNXString(&nx_filename, nx_temp);
	AGAVE_API_THREADPOOL->RunFunction(background_thread, Background_Remove, this, (intptr_t)nx_filename, 0);
}

void Cloud_Background::OnFilePlayed(const wchar_t *filename, time_t played, int count)
{
	ReferenceCountedNXString nx_temp;
	nx_uri_t nx_filename;
	NXStringCreateWithUTF16(&nx_temp, filename);
	NXURICreateWithNXString(&nx_filename, nx_temp);

	/* TODO: benski>  do this but on the backgroundtasks thread!
	db_connection->BeginTransaction();
	CloudDB_Media_FindByFilename(); // get the internal ID
	IDMap_GetProperties(); // so we can call SetProperties with all the values
	IDMap_SetProperties(); // to set the playcount and last played time
	IDMap_AddDirty(internal_id, 1); // mark the playcount as dirty 
	db_connection->Commit();
	call cloudclient->Flush() if you want to hurry up the server call
	*/

	NXURIRelease(nx_filename); // TODO: remove this line when we add the function below
	//AGAVE_API_THREADPOOL->RunFunction(background_thread, Background_Remove, this, (intptr_t)nx_filename, 0);

	// TODO implement
	// set details into the local values and update from the device
}

void Cloud_Background::OnCleared(const wchar_t **filenames, int count)
{
	if (count > 0 && filenames)
	{
		for(int i = 0; i < count; i++)
		{
			OnFileRemove_Post(filenames[i]);
		}
	}
	if (cloud_client)
		cloud_client->Flush();
}

void Cloud_Background::OnGetCloudStatus(const wchar_t *filename, HMENU *menu)
{
	if (!first_pull) return;

	ifc_clouddb *db_connection = cloud_background.Get_DB_Connection();
	if (db_connection)
	{
		*menu = CreatePopupMenu();

		nx_string_t *devices = 0;
		size_t num_devices = 0;
		if (db_connection->Devices_GetIDs(&devices, &num_devices) == NErr_Success)
		{
			for (size_t i = 0, j = 0; i < num_devices; i++)
			{
				DeviceInfoStruct *device_info = new (std::nothrow) DeviceInfoStruct;
				int device_id;
				if (db_connection->Devices_Find(devices[i], &device_id, device_info) == NErr_Success)
				{
					if (NXStringKeywordCompareWithCString(devices[i], OLE_WEB_CLIENT))
					{
						// TODO when we've a reliable way to know if a device supports uploads then change this hard-coding
						// TODO when further device <-> device support happens then this can be changed to allow the menu items, etc
						bool supports_uploads = (!NXStringKeywordCompareWithCString(devices[i], HSS_CLIENT) ||
												 !NXStringKeywordCompareWithCString(devices[i], DROPBOX_CLIENT));
						InsertMenu(*menu, (device_id == local_device_id ? 0 : ++j),
								   MF_BYPOSITION | (!supports_uploads && (device_id != local_device_id) ? MF_GRAYED : 0),
								   CLOUD_SOURCE_MENUS + device_id,
								   (device_id == local_device_id ? WASABI_API_LNGSTRINGW(IDS_LOCAL_LIBRARY) : device_info->name->string));
					}
				}
				NXStringRelease(devices[i]);
				delete device_info;
			}
			if (devices) free(devices);


			// see if we have a local track with a matching media hash and use that
			// otherwise we'll have to go the streaming attempt for playing the file
			ReferenceCountedNXURI fileuri;
			NXURICreateWithUTF16(&fileuri, filename);
			ReferenceCountedNXString media_hash;
			int internal_id = 0, is_ignored = 0;
			if (db_connection->Media_FindByFilename(fileuri, local_device_id, &internal_id, &is_ignored) == NErr_Success)
			{
				db_connection->IDMap_GetMediaHash(internal_id, &media_hash);
			}
			else
			{
				// getting here means we've likely not got a local file so will
				// have to fiddle things and use ComputeMediaHash() to attempt
				// to generate a mediahash we can then use in the later working
				if (ComputeMediaHash(fileuri->string, &media_hash) != NErr_Success)
				{
					// create a new menu if things fail to compute
					/*DestroyMenu(*menu);
					*menu = CreatePopupMenu();
					InsertMenu(*menu, 0, MF_BYPOSITION | MF_GRAYED, CLOUD_SOURCE_MENUS + 1,
							   WASABI_API_LNGSTRINGW(IDS_UNABLE_DETERMINE_CLOUD_SOURCES));
					return;*/
				}
			}

			int *out_device_ids = 0;
			size_t num_device_ids = 0;
			db_connection->IDMap_Get_Devices_From_MediaHash(media_hash, &out_device_ids, &num_device_ids, 0);
			if (num_device_ids > 0)
			{
				for (size_t i = 0; i < num_device_ids; i++)
				{
					CheckMenuItem(*menu, CLOUD_SOURCE_MENUS + (out_device_ids[i]), MF_CHECKED);
					// if we have availability, then we need to allow for removes even if adds are not supported
					EnableMenuItem(*menu, CLOUD_SOURCE_MENUS + (out_device_ids[i]), MF_ENABLED);
				}
			}

			if (out_device_ids) free(out_device_ids);
		}
	}
}

void Cloud_Background::OnProcessCloudStatus(const wchar_t *filename, int menu_item)
{
	if (!first_pull) return;

	// see if we have a local track with a matching media hash and use that
	// otherwise we'll have to go the streaming attempt for playing the file
	ReferenceCountedNXURI fileuri;
	NXURICreateWithUTF16(&fileuri, filename);
	ReferenceCountedNXString media_hash;
	int internal_id = 0, is_ignored = 0;
	if (db_connection->Media_FindByFilename(fileuri, local_device_id, &internal_id, &is_ignored) == NErr_Success)
	{
		db_connection->IDMap_GetMediaHash(internal_id, &media_hash);
	}

	int found = 0, device = (menu_item - CLOUD_SOURCE_MENUS);
	int *out_device_ids = 0, *out_media_ids = 0;
	size_t num_device_ids = 0;
	db_connection->IDMap_Get_Devices_From_MediaHash(media_hash, &out_device_ids, &num_device_ids, &out_media_ids);
	if (num_device_ids > 0)
	{
		for (size_t i = 0; i < num_device_ids; i++)
		{
			if (device == out_device_ids[i])
			{
				nx_string_t name;
				if (db_connection->Devices_GetName(out_device_ids[i], &name, 0) == NErr_Success)
				{
					found = out_device_ids[i];
					wchar_t buf[256];
					StringCchPrintfW(buf, sizeof(buf), WASABI_API_LNGSTRINGW((device == local_device_id) ? IDS_REMOVE_FROM_LOCAL_CLOUD_DEVICE : IDS_REMOVE_FROM_CLOUD_DEVICE), name->string);
					if (MessageBox(0, buf, WASABI_API_LNGSTRINGW(IDS_REMOVE_FROM_DEVICE), MB_YESNO | MB_ICONQUESTION) == IDYES)
					{
						db_connection->BeginTransaction();
						db_connection->Media_Delete(out_media_ids[i]);
						db_connection->IDMap_Remove(out_media_ids[i]);
						db_connection->Commit();
						if (cloud_client) cloud_client->Flush();
					}
					break;
				}
			}
		}
	}

	if (!found)
	{
		nx_string_t name, token;
		if (db_connection->Devices_GetName(device, &name, &token) == NErr_Success)
		{
			wchar_t buf[1024];
			bool supports_uploads = (!NXStringKeywordCompareWithCString(token, HSS_CLIENT) ||
									 !NXStringKeywordCompareWithCString(token, DROPBOX_CLIENT));

			// local add
			if (device == local_device_id)
			{
				StringCchPrintfW(buf, sizeof(buf), L"Are you sure you want to add this song to the 'Local Library' device?");
				if (MessageBox(0, buf, WASABI_API_LNGSTRINGW(IDS_ADD_TO_CLOUD_DEVICE), MB_YESNO | MB_ICONQUESTION) == IDYES)
				{
					this->OnFileAdded(filename);
				}
			}
			// uploads (hss / dropbox)
			else if (supports_uploads)
			{
				StringCchPrintfW(buf, sizeof(buf), L"Are you sure you want to upload this song to '%s' so it will be available on your other Cloud sources?", name->string);
				if (MessageBox(0, buf, WASABI_API_LNGSTRINGW(IDS_ADD_TO_CLOUD_DEVICE), MB_YESNO | MB_ICONQUESTION) == IDYES)
				{
					HWND ml_pmp_window = FindWindow(L"ml_pmp_window", L"ml_pmp_window");
					if (IsWindow(ml_pmp_window))
					{
						// do +1 as need a double-null char
						wchar_t buffer[MAX_PATH+1] = {0};
						cloudDeviceTransfer transfer = {0};
						lstrcpyn(buffer, filename, MAX_PATH);
						transfer.filenames = buffer;
						transfer.device_token = NXStringRetain(token);
						SendMessage(ml_pmp_window, WM_PMP_IPC, (WPARAM)&transfer, PMP_IPC_DEVICECLOUDTRANSFER);
						NXStringRelease((nx_string_t)transfer.device_token);
					}
				}
			}
			// TODO device <-> device
			else
			{
				/*StringCchPrintfW(buf, sizeof(buf), L"Are you sure you want to add this song to the '%s' device so it can be accessed directly on it?", name->string);
				if (MessageBox(0, buf, WASABI_API_LNGSTRINGW(IDS_ADD_TO_CLOUD_DEVICE), MB_YESNO | MB_ICONQUESTION) == IDYES)
				{
				}*/
			}
		}
	}

	if (out_device_ids) free(out_device_ids);
}