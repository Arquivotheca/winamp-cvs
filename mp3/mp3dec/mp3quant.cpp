/***************************************************************************\
 *
*                    MPEG Layer3-Audio Decoder
*                  © 1997-2006 by Fraunhofer IIS
 *                        All Rights Reserved
 *
 *   filename: mp3quant.cpp
 *   project : ISO/MPEG-Decoder
 *   author  : Martin Sieler
 *   date    : 1998-05-26
 *   contents/description: dequantization of sample-data
 *
 *
 \***************************************************************************/

/*
 * $Date: 2009/04/28 20:17:46 $
 * $Id: mp3quant.cpp,v 1.1 2009/04/28 20:17:46 audiodsp Exp $
 */

/* ------------------------ includes --------------------------------------*/

#include "mp3quant.h"

#include "l3table.h"
#include <math.h>
#include <stdlib.h>

/* ------------------------------------------------------------------------*/

static const int pretab[22] =
  {
  0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,3,3,3,2,0
  };

/*-------------------------------------------------------------------------*/

static const float pow2_025[] =
  {
   32768.000000000000f, 27554.49373503371814604391960521f, 23170.475005920789279566868057452f, 19483.969372204581957099519517663f,
   16384.000000000000f, 13777.246867516859073021959802605f, 11585.237502960394639783434028726f,  9741.9846861022909785497597588314f,
    8192.000000000000f,  6888.6234337584295365109799013025f,  5792.6187514801973198917170143629f,  4870.9923430511454892748798794157f,
    4096.000000000000f,  3444.3117168792147682554899506512f,  2896.3093757400986599458585071815f,  2435.4961715255727446374399397079f,
    2048.000000000000f,  1722.1558584396073841277449753256f,  1448.1546878700493299729292535907f,  1217.7480857627863723187199698539f,
    1024.000000000000f,   861.07792921980369206387248766281f,   724.07734393502466498646462679537f,   608.87404288139318615935998492696f,
     512.000000000000f,   430.53896460990184603193624383141f,   362.03867196751233249323231339768f,   304.43702144069659307967999246348f,
     256.000000000000f,   215.2694823049509230159681219157f,   181.01933598375616624661615669884f,   152.21851072034829653983999623174f,
     128.000000000000f,   107.63474115247546150798406095785f,    90.509667991878083123308078349421f,    76.10925536017414826991999811587f,
      64.000000000000f,    53.817370576237730753992030478926f,    45.25483399593904156165403917471f,    38.054627680087074134959999057935f,
      32.000000000000f,    26.908685288118865376996015239463f,    22.627416997969520780827019587355f,    19.027313840043537067479999528968f,
      16.000000000000f,    13.454342644059432688498007619731f,    11.313708498984760390413509793678f,     9.5136569200217685337399997644838f,
       8.000000000000f,     6.7271713220297163442490038098657f,     5.6568542494923801952067548968388f,     4.7568284600108842668699998822419f,
       4.000000000000f,     3.3635856610148581721245019049329f,     2.8284271247461900976033774484194f,     2.378414230005442133434999941121f,
       2.000000000000f,     1.6817928305074290860622509524664f,     1.4142135623730950488016887242097f,     1.1892071150027210667174999705605f,
       1.000000000000f,     0.84089641525371454303112547623321f,     0.70710678118654752440084436210485f,     0.59460355750136053335874998528024f,
       0.500000000000f,     0.42044820762685727151556273811661f,     0.35355339059327376220042218105242f,     0.29730177875068026667937499264012f,
       0.250000000000f,     0.2102241038134286357577813690583f,     0.17677669529663688110021109052621f,     0.14865088937534013333968749632006f,
       0.125000000000f,     0.10511205190671431787889068452915f,     0.088388347648318440550105545263106f,     0.07432544468767006666984374816003f,
       0.062500000000f,     0.052556025953357158939445342264576f,     0.044194173824159220275052772631553f,     0.037162722343835033334921874080015f,
       0.031250000000f,     0.026278012976678579469722671132288f,     0.022097086912079610137526386315777f,     0.018581361171917516667460937040007f,
       0.015625000000f,     0.013139006488339289734861335566144f,     0.011048543456039805068763193157888f,     0.0092906805859587583337304685200037f,
       0.007812500000f,     0.006569503244169644867430667783072f,     0.0055242717280199025343815965789441f,     0.0046453402929793791668652342600019f,
       0.003906250000f,     0.003284751622084822433715333891536f,     0.0027621358640099512671907982894721f,     0.0023226701464896895834326171300009f,
       0.001953125000f,     0.001642375811042411216857666945768f,     0.001381067932004975633595399144736f,     0.0011613350732448447917163085650005f,
       0.000976562500f,     0.000821187905521205608428833472884f,     6.9053396600248781679769957236802e-4f,     5.8066753662242239585815428250023e-4f,
       0.000488281250f,     0.000410593952760602804214416736442f,     3.4526698300124390839884978618401e-4f,     2.9033376831121119792907714125012e-4f,
       0.000244140625f,     0.000205296976380301402107208368221f,     0.000172633491500621954199424893092f,     1.4516688415560559896453857062506e-4f,
       0.0001220703125f,     0.0001026484881901507010536041841105f,     8.6316745750310977099712446546002e-5f,     7.2583442077802799482269285312529e-5f,
       0.00006103515625f,     5.132424409507535052680209205525e-5f,     4.3158372875155488549856223273001e-5f,     3.6291721038901399741134642656265e-5f,
       0.000030517578125f,     2.5662122047537675263401046027625e-5f,     2.1579186437577744274928111636501e-5f,     1.8145860519450699870567321328132e-5f,
       0.0000152587890625f,     1.2831061023768837631700523013812e-5f,     1.078959321878887213746405581825e-5f,     9.0729302597253499352836606640661e-6f,
  };

/*-------------------------------------------------------------------------*/
/* i ^(4/3) */
static const float powx_43[] =
  {
    0.000000000000f,                     1.000000000000f,                    2.5198420997897463295344212145565f,  4.3267487109222251469649149323403f,
	  6.3496042078727978990068225570892f,  8.5498797333834849467655443627193f, 10.902723556992837953347270537964f,  13.390518279406723708393817876841f,
	 16.000000000000f,                     18.720754407467137030770511419221f, 21.544346900318837217592935665194f,  24.463780996262470732818997143944f,
	 27.473141821279964827393013086552f,    30.56735094036984736350021241944f,  33.741991698453219805797175346446f,  36.993181114957051522374169847319f,
	 40.317473596635941272550739432903f,   43.711787041190001042704182548575f,  47.173345095760138928549903047956f,  50.699631325716952479452920067446f,
	 54.288352331898f,  57.937407704004f,  61.644865274419f,  65.408940536586f,
	 69.227979374756f,  73.100443455322f,  77.024897778592f,  81.000000000000f,
	 85.024491212519f,  89.097187944890f,  93.216975178616f,  97.382800224133f,
	101.593667325965f, 105.848632889862f, 110.146801243434f, 114.487320856601f,
	118.869380960207f, 123.292208510900f, 127.755065458361f, 132.257246277553f,
	136.798075734136f, 141.376906855692f, 145.993119085231f, 150.646116596629f,
	155.335326754347f, 160.060198702053f, 164.820202066734f, 169.614825766519f,
	174.443576911885f, 179.305979791126f, 184.201574932019f, 189.129918232576f,
	194.090580154497f, 199.083144973717f, 204.107210082969f, 209.162385341877f,
	214.248292470508f, 219.364564482778f, 224.510845156412f, 229.686788536522f,
	234.892058470132f, 240.126328169233f, 245.389279800185f, 250.680604097473f,
	256.000000000000f, 261.347174308289f, 266.721841361065f, 272.123722729860f,
	277.552546930380f, 283.008049149462f, 288.489970986599f, 293.998060209023f,
	299.532070519474f, 305.091761335830f, 310.676897581822f, 316.287249488156f,
	321.922592403372f, 327.582706613855f, 333.267377172437f, 338.976393735070f,
	344.709550405101f, 350.466645584700f, 356.247481833026f, 362.051865730751f,
	367.879607750583f, 373.730522133445f, 379.604426770021f, 385.501143087346f,
	391.420495940199f, 397.362313507024f, 403.326427190145f, 409.312671520063f,
	415.320884063608f, 421.350905335765f, 427.402578714976f, 433.475750361762f,
	439.570269140479f, 445.685986544083f, 451.822756621728f, 457.980435909091f,
	464.158883361278f, 470.357960288187f, 476.577530292236f, 482.817459208320f,
	489.077615045917f, 495.357867933236f, 501.658090063317f, 507.978155642004f,
	514.317940837697f, 520.677323732817f, 527.056184276906f, 533.454404241292f,
	539.871867175251f, 546.308458363615f, 552.764064785746f, 559.238575075842f,
	565.731879484504f, 572.243869841523f, 578.774439519834f, 585.323483400588f,
	591.890897839313f, 598.476580633093f, 605.080430988760f, 611.702349492036f,
	618.342238077592f, 625.000000000000f, 631.675539805538f, 638.368763304812f
  };

/*-------------------------------------------------------------------------*/

//
// common scale routine for all blocks types
//
static void III_scale
    (
    const int   *pIData,
    float *pFData,
    int    startNdx,
    int    endNdx,
    int    iScale
    )
{
  int    iSample;
  double fScale, fSample;
  int    indx;

  if ( (iScale < 128) && (iScale >= 0) )
    {
    fScale = pow2_025[iScale];

    for ( indx=startNdx; indx<endNdx; indx++ )
      {
      iSample = abs(pIData[indx]);

      if ( iSample )
        {
        if ( iSample < sizeof(powx_43)/sizeof(*powx_43) )
          fSample = powx_43[iSample];
        else
          fSample = pow((double)iSample, 4.0/3.0);

        if ( pIData[indx] > 0 )
          pFData[indx] = (float)( fSample*fScale);
        else
          pFData[indx] = (float)(-fSample*fScale);
        }
      else
        {
        pFData[indx] = 0.0f;
        }
      }
    }
  else
    {
    for ( indx=startNdx;indx<endNdx;indx++ )
      pFData[indx] = 0.0f;
    }
}

/*-------------------------------------------------------------------------*/

//
// long blocks  0,1,3
//
static void III_deq_long
    (
    int              *pIData,
    float            *pFData,
    const MP3SI_GRCH &SiGrCh,
    const MP3SCF     &ScaleFac,
    const MPEG_INFO  &Info
    )
{
  int sfreq = Info.sample_rate_ndx;
  int cb;
  int iScale;
  int startNdx, endNdx;

  for ( cb=0; cb<SiGrCh.zeroSfbStartNdxL; cb++ )
    {
    startNdx = sfBandIndex[Info.fhgVersion][sfreq].l[cb];
    endNdx   = sfBandIndex[Info.fhgVersion][sfreq].l[cb+1];

    iScale = 210 - SiGrCh.global_gain +
             2 * (1 + SiGrCh.scalefac_scale) *
             (ScaleFac.l[cb] + SiGrCh.preflag * pretab[cb]);

    III_scale(pIData, pFData, startNdx, endNdx, iScale);
    }
}

/*-------------------------------------------------------------------------*/

//
// short blocks  2
//
static void III_deq_short
    (
    int              *pIData,
    float            *pFData,
    const MP3SI_GRCH &SiGrCh,
    const MP3SCF     &ScaleFac,
    const MPEG_INFO  &Info
    )
{
  int    sfreq = Info.sample_rate_ndx;
  int    cb;
  int    pt;
  int    width;
  int    iScale;
  int    startNdx, endNdx;

  for ( cb=0; cb < SiGrCh.zeroSfbStartNdxSMax; cb++ )
    {
    width = sfBandIndex[Info.fhgVersion][sfreq].s[cb+1] -
            sfBandIndex[Info.fhgVersion][sfreq].s[cb];

    for ( pt=0; pt<3; pt++ )
      {
      startNdx = sfBandIndex[Info.fhgVersion][sfreq].s[cb]*3+width*pt;
      endNdx   = startNdx+width;

      iScale = 210 - SiGrCh.global_gain +
               8 * SiGrCh.subblock_gain[pt] +
               2 * (1 + SiGrCh.scalefac_scale) * ScaleFac.s[pt][cb];

      III_scale(pIData, pFData, startNdx, endNdx, iScale);
      }
    }
}

/*-------------------------------------------------------------------------*/

//
// mixed blocks  2
//
static void III_deq_mixed
    (
    int              *pIData,
    float            *pFData,
    const MP3SI_GRCH &SiGrCh,
    const MP3SCF     &ScaleFac,
    const MPEG_INFO  &Info
    )
{
  int sfreq = Info.sample_rate_ndx;
  int cb;
  int pt;
  int width;
  int iScale;
  int startNdx, endNdx;

  // long block part
  for ( cb=0; cb<(Info.IsMpeg1 ? 8:6) ; cb++ )
    {
    startNdx = sfBandIndex[Info.fhgVersion][sfreq].l[cb];
    endNdx   = sfBandIndex[Info.fhgVersion][sfreq].l[cb+1];

    iScale = 210 - SiGrCh.global_gain +
             2 * (1 + SiGrCh.scalefac_scale) *
             (ScaleFac.l[cb] + SiGrCh.preflag * pretab[cb]);

    III_scale(pIData, pFData, startNdx, endNdx, iScale);
    }

  // short block part
  if ( !SiGrCh.zeroSfbStartNdxIsLong )
    {
    for ( cb=3; cb<SiGrCh.zeroSfbStartNdxSMax; cb++ )
      {
      width = sfBandIndex[Info.fhgVersion][sfreq].s[cb+1] -
              sfBandIndex[Info.fhgVersion][sfreq].s[cb];

      for ( pt=0; pt<3; pt++ )
        {
        startNdx = sfBandIndex[Info.fhgVersion][sfreq].s[cb]*3+width*pt;
        endNdx   = startNdx+width;

        iScale = 210 - SiGrCh.global_gain +
                 8 * SiGrCh.subblock_gain[pt] +
                 2 * (1 + SiGrCh.scalefac_scale) * ScaleFac.s[pt][cb];

        III_scale(pIData, pFData, startNdx, endNdx, iScale);
        }
      }
    }
  }

/*-------------------------------------------------------------------------*/

static void III_zeroSpec
    (
    float            *pFData,
    const MP3SI_GRCH &SiGrCh
    )
{
  int i;

  for ( i=SiGrCh.zeroStartNdx ; i<SBLIMIT*SSLIMIT; i++ )
    {
    pFData[i] = 0.0f;
    }
}

/*-------------------------------------------------------------------------*/

void mp3DequantizeSpectrum
    (
    int              *pIData,
    float            *pFData,
    const MP3SI_GRCH &SiGrCh,
    const MP3SCF     &ScaleFac,
    const MPEG_INFO  &Info
    )
{
  /* dequantize all sfb up to zeroSfbStartNdx[LS] */
  if ( SiGrCh.window_switching_flag && (SiGrCh.block_type == 2) )
    {
    if ( SiGrCh.mixed_block_flag )
      III_deq_mixed(pIData, pFData, SiGrCh, ScaleFac, Info);
    else
      III_deq_short(pIData, pFData, SiGrCh, ScaleFac, Info);
    }
  else
    {
    III_deq_long(pIData, pFData, SiGrCh, ScaleFac, Info);
    }

  /* zero samples above zeroStartNdx */
  III_zeroSpec(pFData, SiGrCh);
}

/*-------------------------------------------------------------------------*/
