#pragma once
#include "../replicant/foundation/types.h"
#include <windows.h>

#include "../ml_pmp/transcoder.h"
#include "../ml_pmp/pmp.h"

#include "../nde/nde_c.h"
#include "../nu/AutoLock.h"

#include "../nu/Vector.h"
#include "../replicant/cloud/ifc_cloudclient.h"
#include "../replicant/cloud/Attributes.h"
#include "../replicant/cloud/ifc_clouddb.h"
#include "../nu/ValueMap.h"

enum
{
	DEVICEVIEW_COL_FILENAME = 0,
	DEVICEVIEW_COL_ARTIST=1,
	DEVICEVIEW_COL_ALBUM=2,
	DEVICEVIEW_COL_TITLE=3,
	DEVICEVIEW_COL_GENRE=4,
	DEVICEVIEW_COL_ALBUM_ARTIST=5,
	DEVICEVIEW_COL_PUBLISHER=6,
	DEVICEVIEW_COL_COMPOSER=7,
	DEVICEVIEW_COL_YEAR=8,
	DEVICEVIEW_COL_TRACK=9,
	DEVICEVIEW_COL_BITRATE=10,
	DEVICEVIEW_COL_DISC_NUMBER=11,
	DEVICEVIEW_COL_LENGTH=12,
	DEVICEVIEW_COL_SIZE=13,
	DEVICEVIEW_COL_PLAY_COUNT=14,
};



class CloudPlaylist;

class CloudDevice : public Device, public cb_cloud_upload, public ifc_metadata
{
public:
	enum SpecialDevice
	{
		DEVICE_HSS,
		DEVICE_DROPBOX,
		DEVICE_LOCAL_LIBRARY,
		DEVICE_WEB_CLIENT,
		DEVICE_CLIENT,
	};
	enum DevicePlatform
	{
		PLATFORM_NULL,
		PLATFORM_WINDOWS,
		PLATFORM_WINDOWS_LAPTOP,
		PLATFORM_ANDROID,
		PLATFORM_APPLE,
	};
	CloudDevice(nx_string_t device_token, int device_id, SpecialDevice special_device, DevicePlatform platform_type);
	~CloudDevice();

	void LazyLoad();
	//////////////////////////////////////////

	virtual __int64 getDeviceCapacityAvailable(); // in bytes
	virtual __int64 getDeviceCapacityTotal(); // in bytes

	virtual void Eject(); // if you ejected successfully, you MUST call PMP_IPC_DEVICEDISCONNECTED and delete this;
	virtual void Close(); // save any changes, and call PMP_IPC_DEVICEDISCONNECTED AND delete this;

	// return 0 for success, -1 for failed or cancelled
	virtual int transferTrackToDevice(const itemRecordW * track, // the track to transfer
	void * callbackContext, //pass this to the callback
	void (*callback)(void *callbackContext, wchar_t *status),  // call this every so often so the GUI can be updated. Including when finished!
											songid_t * songid, // fill in the songid when you are finished
											int * killswitch // if this gets set to anything other than zero, the transfer has been cancelled by the user
	);
	virtual int trackAddedToTransferQueue(const itemRecordW *track); // return 0 to accept, -1 for "not enough space", -2 for "incorrect format"
	virtual void trackRemovedFromTransferQueue(const itemRecordW *track); 

	// return the amount of space that will be taken up on the device by the track (once it has been tranferred)
	// or 0 for incompatable. This is usually the filesize, unless you are transcoding. An estimate is acceptable.
	virtual __int64 getTrackSizeOnDevice(const itemRecordW *track); 

	virtual void deleteTrack(songid_t songid); // physically remove from device. Be sure to remove it from all the playlists!

	virtual void commitChanges(); // optional. Will be called at a good time to save changes

	virtual int getPlaylistCount(); // always at least 1. playlistnumber 0 is the Master Playlist containing all tracks.
	// PlaylistName(0) should return the name of the device.
	virtual void getPlaylistName(int playlistnumber, wchar_t *buf, int len);
	virtual int getPlaylistLength(int playlistnumber);
	virtual songid_t getPlaylistTrack(int playlistnumber,int songnum); // returns a songid

	virtual void setPlaylistName(int playlistnumber, const wchar_t *buf); // with playlistnumber==0, set the name of the device.
	virtual void playlistSwapItems(int playlistnumber, int posA, int posB); // swap the songs at position posA and posB
	virtual void sortPlaylist(int playlistnumber, int sortBy);
	virtual void addTrackToPlaylist(int playlistnumber, songid_t songid); // adds songid to the end of the playlist
	virtual void removeTrackFromPlaylist(int playlistnumber, int songnum); //where songnum is the position of the track in the playlist

	virtual void deletePlaylist(int playlistnumber);
	virtual int newPlaylist(const wchar_t *name); // create empty playlist, returns playlistnumber. -1 for failed.

	virtual void getTrackArtist(songid_t songid, wchar_t *buf, int len);
	virtual void getTrackAlbum(songid_t songid, wchar_t *buf, int len);
	virtual void getTrackTitle(songid_t songid, wchar_t *buf, int len);
	virtual int getTrackTrackNum(songid_t songid);
	virtual int getTrackDiscNum(songid_t songid);
	virtual void getTrackGenre(songid_t songid, wchar_t * buf, int len);
	virtual int getTrackYear(songid_t songid);
	virtual __int64 getTrackSize(songid_t songid); // in bytes
	virtual int getTrackLength(songid_t songid); // in millisecs
	virtual int getTrackBitrate(songid_t songid); // in kbps
	virtual int getTrackPlayCount(songid_t songid);
	virtual int getTrackRating(songid_t songid); //0-5
	virtual __time64_t getTrackLastPlayed(songid_t songid); // in unix time format
	virtual __time64_t getTrackLastUpdated(songid_t songid); // in unix time format
	virtual void getTrackAlbumArtist(songid_t songid, wchar_t *buf, int len);
	virtual void getTrackPublisher(songid_t songid, wchar_t *buf, int len);
	virtual void getTrackComposer(songid_t songid, wchar_t *buf, int len);
	virtual void getTrackMimeType(songid_t songid, wchar_t * buf, int len);
	virtual int getTrackType(songid_t songid);
	virtual void getTrackExtraInfo(songid_t songid, const wchar_t *field, wchar_t *buf, int len) ; //optional

	// feel free to ignore any you don't support
	virtual void setTrackArtist(songid_t songid, const wchar_t *value);
	virtual void setTrackAlbum(songid_t songid, const wchar_t *value);
	virtual void setTrackTitle(songid_t songid, const wchar_t *value);
	virtual void setTrackTrackNum(songid_t songid, int value);
	virtual void setTrackDiscNum(songid_t songid, int value);
	virtual void setTrackGenre(songid_t songid, const wchar_t *value);
	virtual void setTrackYear(songid_t songid, int year);
	virtual void setTrackPlayCount(songid_t songid, int value);
	virtual void setTrackRating(songid_t songid, int value);
	virtual void setTrackLastPlayed(songid_t songid, __time64_t value); // in unix time format
	virtual void setTrackLastUpdated(songid_t songid, __time64_t value); // in unix time format
	virtual void setTrackAlbumArtist(songid_t songid, const wchar_t *value);
	virtual void setTrackPublisher(songid_t songid, const wchar_t *value);
	virtual void setTrackComposer(songid_t songid, const wchar_t *value);
	virtual void setTrackExtraInfo(songid_t songid, const wchar_t *field, const wchar_t *value) ; //optional

	virtual bool playTracks(songid_t * songidList, int listLength, int startPlaybackAt, bool enqueue); // return false if unsupported

	virtual intptr_t extraActions(intptr_t param1, intptr_t param2, intptr_t param3,intptr_t param4);

	virtual bool copyToHardDriveSupported();

	virtual __int64 songSizeOnHardDrive(songid_t song); // how big a song will be when copied back. Return -1 for not supported.

	virtual int copyToHardDrive(songid_t song, // the song to copy
	wchar_t * path, // path to copy to, in the form "c:\directory\song". The directory will already be created, you must append ".mp3" or whatever to this string! (there is space for at least 10 new characters).
	void * callbackContext, //pass this to the callback
	void (*callback)(void * callbackContext, wchar_t * status),  // call this every so often so the GUI can be updated. Including when finished!
	int * killswitch // if this gets set to anything other than zero, the transfer has been cancelled by the user
	); // -1 for failed/not supported. 0 for success.

	// art functions
	virtual void setArt(songid_t songid, void *buf, int w, int h); //buf is in format ARGB32*
	virtual pmpart_t getArt(songid_t songid);
	virtual void releaseArt(pmpart_t art);
	virtual int drawArt(pmpart_t art, HDC dc, int x, int y, int w, int h);
	virtual void getArtNaturalSize(pmpart_t art, int *w, int *h);
	virtual void setArtNaturalSize(pmpart_t art, int w, int h);
	virtual void getArtData(pmpart_t art, void* data); // data ARGB32* is at natural size
	virtual bool artIsEqual(pmpart_t a, pmpart_t b);

	typedef ValueMap<int, nx_string_t> ValueCache;
	ValueCache value_cache;

	typedef ValueMap<int, int64_t> IntCache;
	IntCache int_cache;
	void CacheLookup(songid_t songid, int attributeid, wchar_t *buf, int len);
	int64_t CacheLookup(songid_t songid, int attributeid);
	int64_t CacheLookupIDMap(songid_t songid, int attributeid);
	void CacheLookupMediaHash(songid_t songid, nx_string_t *media_hash);
	
	void CacheLookupMIME(songid_t songid, wchar_t *buf, int len);
private:
	int current_edit_internal_id;
	Vector<int> ids;
	typedef ValueMap<int, nx_string_t> CloudFiles;
	CloudFiles cloud_files;
	int *out_ids;
	nx_string_t *out_filenames;
	ifc_clouddb *db_connection;
	Attributes attributes;
	HANDLE upload_waiter;

	int WASABICALL CloudUploadCallback_OnProgress(uint64_t bytes, uint64_t total);
	void WASABICALL CloudUploadCallback_OnFinished(int ret);
	void WASABICALL CloudUploadCallback_OnError(nx_string_t action, nx_string_t code, nx_string_t message, nx_string_t field);
	int WASABICALL CloudUploadCallback_IsKilled();

	/* ifc_metadata */
	ns_error_t WASABICALL Metadata_GetField(int field, unsigned int index, nx_string_t *value);
	ns_error_t WASABICALL Metadata_GetInteger(int field, unsigned int index, int64_t *value);
	ns_error_t WASABICALL Metadata_GetReal(int field, unsigned int index, double *value);
	ns_error_t WASABICALL Metadata_GetArtwork(int field, unsigned int index, artwork_t *artwork, data_flags_t flags) { return NErr_NotImplemented; }
	ns_error_t WASABICALL Metadata_GetBinary(int field, unsigned int index, nx_data_t *data) { return NErr_NotImplemented; }

	void setMetadata(int internal_id, int field_id, const wchar_t *value);
	void setMetadata(int internal_id, int field_id, int64_t value);

	void (*callback)(void *callbackContext, wchar_t *status);
	void *context;
	int *killswitch;
	ifc_clouddb *transfer_db_connection;
	int UpdateCaches();
public:
	SpecialDevice special_device;
	DevicePlatform platform_type;
	int device_id;
	nx_string_t device_name;
	nx_string_t device_token;
};