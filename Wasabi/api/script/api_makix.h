// ----------------------------------------------------------------------------
// Generated by InterfaceFactory [Fri Oct 01 02:49:40 1999]
// 
// File        : api_makix.h
// Class       : api_maki
// class layer : Dispatchable Receiver
// ----------------------------------------------------------------------------

#ifndef __API_MAKIX_H
#define __API_MAKIX_H

#include "api_maki.h"

class ScriptObject;
class ScriptObjectController;

// ----------------------------------------------------------------------------

class api_makiX : public api_maki {
  protected:
    api_makiX() {}
  public:
    virtual void maki_pushObject(void *o)=0;
    virtual void maki_pushInt(int i)=0;
    virtual void maki_pushBoolean(int b)=0;
    virtual void maki_pushFloat(float f)=0;
    virtual void maki_pushDouble(double d)=0;
    virtual void maki_pushString(const wchar_t *s)=0;
    virtual void maki_pushVoid()=0;
    virtual void maki_pushAny(scriptVar v)=0;
    virtual void *maki_popObject()=0;
    virtual int maki_popInt()=0;
    virtual bool maki_popBoolean()=false;
    virtual float maki_popFloat()=0;
    virtual double maki_popDouble()=0;
    virtual const wchar_t *maki_popString()=0;
    virtual scriptVar maki_popAny()=0;
    virtual void maki_popDiscard()=0;
    virtual const wchar_t *maki_getFunction(int dlfid, int *nparams, ScriptObjectController **p)=0;
    virtual int maki_addDlfRef(ScriptObjectController *o, const wchar_t *function_name, void *host)=0;
    virtual void maki_addDlfClassRef(ScriptObjectController *o, void *host)=0;
    virtual void maki_remDlfRef(void *host)=0;
    virtual scriptVar maki_callFunction(ScriptObject *o, int dlfid, scriptVar **params)=0;
    virtual scriptVar maki_triggerEvent(ScriptObject *o, int dlfid, int np, int scriptid = -1)=0;
    virtual int maki_getScriptInt(scriptVar v)=0;
    virtual bool maki_getScriptBoolean(scriptVar v)=false;
    virtual float maki_getScriptFloat(scriptVar v)=0;
    virtual double maki_getScriptDouble(scriptVar v)=0;
    virtual const wchar_t *maki_getScriptString(scriptVar v)=0;
    virtual ScriptObject *maki_getScriptObject(scriptVar v)=0;
    virtual scriptVar maki_updateDlf(maki_cmd *cmd, int *dlfid, int *linkcount)=0;
    virtual ScriptObject *maki_instantiate(GUID classguid)=0;
    virtual void maki_destroy(ScriptObject *o)=0;
    virtual void *maki_encapsulate(GUID classguid, ScriptObject *o)=0;
    virtual void maki_deencapsulate(GUID classguid, void *o)=0;
    virtual ScriptObjectController *maki_getController(GUID scriptclass)=0;
    virtual int maki_createOrphan(int type)=0;
    virtual void maki_killOrphan(int id)=0;
    virtual void maki_setObjectAtom(const wchar_t *atomname, ScriptObject *object)=0;
    virtual ScriptObject *maki_getObjectAtom(const wchar_t *atomname)=0;
  #ifdef WASABI_COMPILE_WND
    virtual ScriptObject *maki_findObject(const wchar_t *name)=0;
  #endif
    virtual void vcpu_addScriptObject(ScriptObject *o)=0;
    virtual void vcpu_removeScriptObject(ScriptObject *o)=0;
    virtual int vcpu_getCacheCount()=0;
    virtual int vcpu_isValidScriptId(int id)=0;
    virtual int vcpu_mapVarId(int varid, int scriptid)=0;
    virtual int vcpu_getUserAncestorId(int varid, int scriptid)=0;
    virtual int vcpu_getNumEvents()=0;
    virtual int vcpu_getEvent(int event, int *dlf, int *script, int *var)=0;
    virtual int vcpu_getComplete()=0;
    virtual void vcpu_setComplete()=0;
    virtual void vcpu_resetComplete()=0;
    virtual const wchar_t *vcpu_getClassName(int vcpuid, int localclassid)=0;
  
  protected:
    RECVS_DISPATCH;
};

#endif // __API_MAKIX_H
