/* This file was generated by Maki Compiler, do not edit manually */

#include <precomp.h>
#include <api/api.h>
#include "c_guitree.h"
#include <api/script/objcontroller.h>

C_GuiTree::C_GuiTree(ScriptObject *object) : C_GuiObject(object) {
  inited = 0;
  C_hook(object);
}

C_GuiTree::C_GuiTree() {
  inited = 0;
}

void C_GuiTree::C_hook(ScriptObject *object) {
  ASSERT(!inited);
  ScriptObjectController *controller = object->vcpu_getController();
  obj = controller->cast(object, guiTreeGuid);
  if (obj != object && obj != NULL)
    controller = obj->vcpu_getController();
  else
    obj = NULL;

  int iter = WASABI_API_APP->app_getInitCount();
  if (!loaded || loaded != iter) {
    loaded = iter;
    onwantautocontextmenu_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"onWantAutoContextMenu", this);
    onmousewheelup_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"onMouseWheelUp", this);
    onmousewheeldown_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"onMouseWheelDown", this);
    oncontextmenu_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"onContextMenu", this);
    onchar_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"onChar", this);
    onitemrecvdrop_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"onItemRecvDrop", this);
    onlabelchange_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"onLabelChange", this);
    onitemselected_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"onItemSelected", this);
    onitemdeselected_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"onItemDeselected", this);
    getnumrootitems_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"getNumRootItems", this);
    enumrootitem_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"enumRootItem", this);
    jumptonext_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"jumpToNext", this);
    ensureitemvisible_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"ensureItemVisible", this);
    getcontentswidth_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"getContentsWidth", this);
    getcontentsheight_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"getContentsHeight", this);
    addtreeitem_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"addTreeItem", this);
    removetreeitem_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"removeTreeItem", this);
    movetreeitem_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"moveTreeItem", this);
    deleteallitems_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"deleteAllItems", this);
    expanditem_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"expandItem", this);
    expanditemdeferred_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"expandItemDeferred", this);
    collapseitem_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"collapseItem", this);
    collapseitemdeferred_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"collapseItemDeferred", this);
    selectitem_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"selectItem", this);
    selectitemdeferred_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"selectItemDeferred", this);
    delitemdeferred_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"delItemDeferred", this);
    hiliteitem_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"hiliteItem", this);
    unhiliteitem_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"unhiliteItem", this);
    getcuritem_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"getCurItem", this);
    hittest_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"hitTest", this);
    edititemlabel_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"editItemLabel", this);
    canceleditlabel_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"cancelEditLabel", this);
    setautoedit_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"setAutoEdit", this);
    getautoedit_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"getAutoEdit", this);
    getbylabel_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"getByLabel", this);
    setsorted_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"setSorted", this);
    getsorted_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"getSorted", this);
    sorttreeitems_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"sortTreeItems", this);
    getsibling_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"getSibling", this);
    setautocollapse_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"setAutoCollapse", this);
    setfontsize_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"setFontSize", this);
    getfontsize_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"getFontSize", this);
    getnumvisiblechilditems_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"getNumVisibleChildItems", this);
    getnumvisibleitems_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"getNumVisibleItems", this);
    enumvisibleitems_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"enumVisibleItems", this);
    enumvisiblechilditems_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"enumVisibleChildItems", this);
    enumallitems_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"enumAllItems", this);
    getitemrectx_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"getItemRectX", this);
    getitemrecty_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"getItemRectY", this);
    getitemrectw_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"getItemRectW", this);
    getitemrecth_id = WASABI_API_MAKI->maki_addDlfRef(controller, L"getItemRectH", this);
  }
  inited = 1;
}

C_GuiTree::~C_GuiTree() {
}

ScriptObject *C_GuiTree::getScriptObject() {
  if (obj != NULL) return obj;
  return C_GUITREE_PARENT::getScriptObject();
}

int C_GuiTree::onWantAutoContextMenu() {
  ASSERT(inited);
  return GET_SCRIPT_INT(WASABI_API_MAKI->maki_callFunction(getScriptObject(), onwantautocontextmenu_id, NULL));
}

int C_GuiTree::onMouseWheelUp(int clicked, int lines) {
  ASSERT(inited);
  scriptVar a = MAKE_SCRIPT_INT(clicked);
  scriptVar b = MAKE_SCRIPT_INT(lines);
  scriptVar *params[2] = {&a, &b};
  return GET_SCRIPT_INT(WASABI_API_MAKI->maki_callFunction(getScriptObject(), onmousewheelup_id, params));
}

int C_GuiTree::onMouseWheelDown(int clicked, int lines) {
  ASSERT(inited);
  scriptVar a = MAKE_SCRIPT_INT(clicked);
  scriptVar b = MAKE_SCRIPT_INT(lines);
  scriptVar *params[2] = {&a, &b};
  return GET_SCRIPT_INT(WASABI_API_MAKI->maki_callFunction(getScriptObject(), onmousewheeldown_id, params));
}

int C_GuiTree::onContextMenu(int x, int y) {
  ASSERT(inited);
  scriptVar a = MAKE_SCRIPT_INT(x);
  scriptVar b = MAKE_SCRIPT_INT(y);
  scriptVar *params[2] = {&a, &b};
  return GET_SCRIPT_INT(WASABI_API_MAKI->maki_callFunction(getScriptObject(), oncontextmenu_id, params));
}

int C_GuiTree::onChar(int c) {
  ASSERT(inited);
  scriptVar a = MAKE_SCRIPT_INT(c);
  scriptVar *params[1] = {&a};
  return GET_SCRIPT_INT(WASABI_API_MAKI->maki_callFunction(getScriptObject(), onchar_id, params));
}

void C_GuiTree::onItemRecvDrop(ScriptObject *item) {
  ASSERT(inited);
  scriptVar a = MAKE_SCRIPT_OBJECT(item);
  scriptVar *params[1] = {&a};
  WASABI_API_MAKI->maki_callFunction(getScriptObject(), onitemrecvdrop_id, params);
}

void C_GuiTree::onLabelChange(ScriptObject *item) {
  ASSERT(inited);
  scriptVar a = MAKE_SCRIPT_OBJECT(item);
  scriptVar *params[1] = {&a};
  WASABI_API_MAKI->maki_callFunction(getScriptObject(), onlabelchange_id, params);
}

void C_GuiTree::onItemSelected(ScriptObject *item) {
  ASSERT(inited);
  scriptVar a = MAKE_SCRIPT_OBJECT(item);
  scriptVar *params[1] = {&a};
  WASABI_API_MAKI->maki_callFunction(getScriptObject(), onitemselected_id, params);
}

void C_GuiTree::onItemDeselected(ScriptObject *item) {
  ASSERT(inited);
  scriptVar a = MAKE_SCRIPT_OBJECT(item);
  scriptVar *params[1] = {&a};
  WASABI_API_MAKI->maki_callFunction(getScriptObject(), onitemdeselected_id, params);
}

int C_GuiTree::getNumRootItems() {
  ASSERT(inited);
  return GET_SCRIPT_INT(WASABI_API_MAKI->maki_callFunction(getScriptObject(), getnumrootitems_id, NULL));
}

ScriptObject *C_GuiTree::enumRootItem(int which) {
  ASSERT(inited);
  scriptVar a = MAKE_SCRIPT_INT(which);
  scriptVar *params[1] = {&a};
  return GET_SCRIPT_OBJECT(WASABI_API_MAKI->maki_callFunction(getScriptObject(), enumrootitem_id, params));
}

void C_GuiTree::jumpToNext(int c) {
  ASSERT(inited);
  scriptVar a = MAKE_SCRIPT_INT(c);
  scriptVar *params[1] = {&a};
  WASABI_API_MAKI->maki_callFunction(getScriptObject(), jumptonext_id, params);
}

void C_GuiTree::ensureItemVisible(ScriptObject *item) {
  ASSERT(inited);
  scriptVar a = MAKE_SCRIPT_OBJECT(item);
  scriptVar *params[1] = {&a};
  WASABI_API_MAKI->maki_callFunction(getScriptObject(), ensureitemvisible_id, params);
}

int C_GuiTree::getContentsWidth() {
  ASSERT(inited);
  return GET_SCRIPT_INT(WASABI_API_MAKI->maki_callFunction(getScriptObject(), getcontentswidth_id, NULL));
}

int C_GuiTree::getContentsHeight() {
  ASSERT(inited);
  return GET_SCRIPT_INT(WASABI_API_MAKI->maki_callFunction(getScriptObject(), getcontentsheight_id, NULL));
}

ScriptObject *C_GuiTree::addTreeItem(ScriptObject *item, ScriptObject *par, int sorted, int haschildtab) {
  ASSERT(inited);
  scriptVar a = MAKE_SCRIPT_OBJECT(item);
  scriptVar b = MAKE_SCRIPT_OBJECT(par);
  scriptVar c = MAKE_SCRIPT_INT(sorted);
  scriptVar d = MAKE_SCRIPT_INT(haschildtab);
  scriptVar *params[4] = {&a, &b, &c, &d};
  return GET_SCRIPT_OBJECT(WASABI_API_MAKI->maki_callFunction(getScriptObject(), addtreeitem_id, params));
}

int C_GuiTree::removeTreeItem(ScriptObject *item) {
  ASSERT(inited);
  scriptVar a = MAKE_SCRIPT_OBJECT(item);
  scriptVar *params[1] = {&a};
  return GET_SCRIPT_INT(WASABI_API_MAKI->maki_callFunction(getScriptObject(), removetreeitem_id, params));
}

void C_GuiTree::moveTreeItem(ScriptObject *item, ScriptObject *newparent) {
  ASSERT(inited);
  scriptVar a = MAKE_SCRIPT_OBJECT(item);
  scriptVar b = MAKE_SCRIPT_OBJECT(newparent);
  scriptVar *params[2] = {&a, &b};
  WASABI_API_MAKI->maki_callFunction(getScriptObject(), movetreeitem_id, params);
}

void C_GuiTree::deleteAllItems() {
  ASSERT(inited);
  WASABI_API_MAKI->maki_callFunction(getScriptObject(), deleteallitems_id, NULL);
}

int C_GuiTree::expandItem(ScriptObject *item) {
  ASSERT(inited);
  scriptVar a = MAKE_SCRIPT_OBJECT(item);
  scriptVar *params[1] = {&a};
  return GET_SCRIPT_INT(WASABI_API_MAKI->maki_callFunction(getScriptObject(), expanditem_id, params));
}

void C_GuiTree::expandItemDeferred(ScriptObject *item) {
  ASSERT(inited);
  scriptVar a = MAKE_SCRIPT_OBJECT(item);
  scriptVar *params[1] = {&a};
  WASABI_API_MAKI->maki_callFunction(getScriptObject(), expanditemdeferred_id, params);
}

int C_GuiTree::collapseItem(ScriptObject *item) {
  ASSERT(inited);
  scriptVar a = MAKE_SCRIPT_OBJECT(item);
  scriptVar *params[1] = {&a};
  return GET_SCRIPT_INT(WASABI_API_MAKI->maki_callFunction(getScriptObject(), collapseitem_id, params));
}

void C_GuiTree::collapseItemDeferred(ScriptObject *item) {
  ASSERT(inited);
  scriptVar a = MAKE_SCRIPT_OBJECT(item);
  scriptVar *params[1] = {&a};
  WASABI_API_MAKI->maki_callFunction(getScriptObject(), collapseitemdeferred_id, params);
}

void C_GuiTree::selectItem(ScriptObject *item) {
  ASSERT(inited);
  scriptVar a = MAKE_SCRIPT_OBJECT(item);
  scriptVar *params[1] = {&a};
  WASABI_API_MAKI->maki_callFunction(getScriptObject(), selectitem_id, params);
}

void C_GuiTree::selectItemDeferred(ScriptObject *item) {
  ASSERT(inited);
  scriptVar a = MAKE_SCRIPT_OBJECT(item);
  scriptVar *params[1] = {&a};
  WASABI_API_MAKI->maki_callFunction(getScriptObject(), selectitemdeferred_id, params);
}

void C_GuiTree::delItemDeferred(ScriptObject *item) {
  ASSERT(inited);
  scriptVar a = MAKE_SCRIPT_OBJECT(item);
  scriptVar *params[1] = {&a};
  WASABI_API_MAKI->maki_callFunction(getScriptObject(), delitemdeferred_id, params);
}

void C_GuiTree::hiliteItem(ScriptObject *item) {
  ASSERT(inited);
  scriptVar a = MAKE_SCRIPT_OBJECT(item);
  scriptVar *params[1] = {&a};
  WASABI_API_MAKI->maki_callFunction(getScriptObject(), hiliteitem_id, params);
}

void C_GuiTree::unhiliteItem(ScriptObject *item) {
  ASSERT(inited);
  scriptVar a = MAKE_SCRIPT_OBJECT(item);
  scriptVar *params[1] = {&a};
  WASABI_API_MAKI->maki_callFunction(getScriptObject(), unhiliteitem_id, params);
}

ScriptObject *C_GuiTree::getCurItem() {
  ASSERT(inited);
  return GET_SCRIPT_OBJECT(WASABI_API_MAKI->maki_callFunction(getScriptObject(), getcuritem_id, NULL));
}

ScriptObject *C_GuiTree::hitTest(int x, int y) {
  ASSERT(inited);
  scriptVar a = MAKE_SCRIPT_INT(x);
  scriptVar b = MAKE_SCRIPT_INT(y);
  scriptVar *params[2] = {&a, &b};
  return GET_SCRIPT_OBJECT(WASABI_API_MAKI->maki_callFunction(getScriptObject(), hittest_id, params));
}

void C_GuiTree::editItemLabel(ScriptObject *item) {
  ASSERT(inited);
  scriptVar a = MAKE_SCRIPT_OBJECT(item);
  scriptVar *params[1] = {&a};
  WASABI_API_MAKI->maki_callFunction(getScriptObject(), edititemlabel_id, params);
}

void C_GuiTree::cancelEditLabel(int destroyit) {
  ASSERT(inited);
  scriptVar a = MAKE_SCRIPT_INT(destroyit);
  scriptVar *params[1] = {&a};
  WASABI_API_MAKI->maki_callFunction(getScriptObject(), canceleditlabel_id, params);
}

void C_GuiTree::setAutoEdit(int ae) {
  ASSERT(inited);
  scriptVar a = MAKE_SCRIPT_INT(ae);
  scriptVar *params[1] = {&a};
  WASABI_API_MAKI->maki_callFunction(getScriptObject(), setautoedit_id, params);
}

int C_GuiTree::getAutoEdit() {
  ASSERT(inited);
  return GET_SCRIPT_INT(WASABI_API_MAKI->maki_callFunction(getScriptObject(), getautoedit_id, NULL));
}

ScriptObject *C_GuiTree::getByLabel(ScriptObject *item, const wchar_t *name) 
{
  ASSERT(inited);
  scriptVar a = MAKE_SCRIPT_OBJECT(item);
  scriptVar b = MAKE_SCRIPT_STRING(name);
  scriptVar *params[2] = {&a, &b};
  return GET_SCRIPT_OBJECT(WASABI_API_MAKI->maki_callFunction(getScriptObject(), getbylabel_id, params));
}

void C_GuiTree::setSorted(int dosort) {
  ASSERT(inited);
  scriptVar a = MAKE_SCRIPT_INT(dosort);
  scriptVar *params[1] = {&a};
  WASABI_API_MAKI->maki_callFunction(getScriptObject(), setsorted_id, params);
}

int C_GuiTree::getSorted() {
  ASSERT(inited);
  return GET_SCRIPT_INT(WASABI_API_MAKI->maki_callFunction(getScriptObject(), getsorted_id, NULL));
}

void C_GuiTree::sortTreeItems() {
  ASSERT(inited);
  WASABI_API_MAKI->maki_callFunction(getScriptObject(), sorttreeitems_id, NULL);
}

ScriptObject *C_GuiTree::getSibling(ScriptObject *item) {
  ASSERT(inited);
  scriptVar a = MAKE_SCRIPT_OBJECT(item);
  scriptVar *params[1] = {&a};
  return GET_SCRIPT_OBJECT(WASABI_API_MAKI->maki_callFunction(getScriptObject(), getsibling_id, params));
}

void C_GuiTree::setAutoCollapse(int doautocollapse) {
  ASSERT(inited);
  scriptVar a = MAKE_SCRIPT_INT(doautocollapse);
  scriptVar *params[1] = {&a};
  WASABI_API_MAKI->maki_callFunction(getScriptObject(), setautocollapse_id, params);
}

int C_GuiTree::setFontSize(int newsize) {
  ASSERT(inited);
  scriptVar a = MAKE_SCRIPT_INT(newsize);
  scriptVar *params[1] = {&a};
  return GET_SCRIPT_INT(WASABI_API_MAKI->maki_callFunction(getScriptObject(), setfontsize_id, params));
}

int C_GuiTree::getFontSize() {
  ASSERT(inited);
  return GET_SCRIPT_INT(WASABI_API_MAKI->maki_callFunction(getScriptObject(), getfontsize_id, NULL));
}

int C_GuiTree::getNumVisibleChildItems(ScriptObject *c) {
  ASSERT(inited);
  scriptVar a = MAKE_SCRIPT_OBJECT(c);
  scriptVar *params[1] = {&a};
  return GET_SCRIPT_INT(WASABI_API_MAKI->maki_callFunction(getScriptObject(), getnumvisiblechilditems_id, params));
}

int C_GuiTree::getNumVisibleItems() {
  ASSERT(inited);
  return GET_SCRIPT_INT(WASABI_API_MAKI->maki_callFunction(getScriptObject(), getnumvisibleitems_id, NULL));
}

ScriptObject *C_GuiTree::enumVisibleItems(int n) {
  ASSERT(inited);
  scriptVar a = MAKE_SCRIPT_INT(n);
  scriptVar *params[1] = {&a};
  return GET_SCRIPT_OBJECT(WASABI_API_MAKI->maki_callFunction(getScriptObject(), enumvisibleitems_id, params));
}

ScriptObject *C_GuiTree::enumVisibleChildItems(ScriptObject *c, int n) {
  ASSERT(inited);
  scriptVar a = MAKE_SCRIPT_OBJECT(c);
  scriptVar b = MAKE_SCRIPT_INT(n);
  scriptVar *params[2] = {&a, &b};
  return GET_SCRIPT_OBJECT(WASABI_API_MAKI->maki_callFunction(getScriptObject(), enumvisiblechilditems_id, params));
}

ScriptObject *C_GuiTree::enumAllItems(int n) {
  ASSERT(inited);
  scriptVar a = MAKE_SCRIPT_INT(n);
  scriptVar *params[1] = {&a};
  return GET_SCRIPT_OBJECT(WASABI_API_MAKI->maki_callFunction(getScriptObject(), enumallitems_id, params));
}

int C_GuiTree::getItemRectX(ScriptObject *item) {
  ASSERT(inited);
  scriptVar a = MAKE_SCRIPT_OBJECT(item);
  scriptVar *params[1] = {&a};
  return GET_SCRIPT_INT(WASABI_API_MAKI->maki_callFunction(getScriptObject(), getitemrectx_id, params));
}

int C_GuiTree::getItemRectY(ScriptObject *item) {
  ASSERT(inited);
  scriptVar a = MAKE_SCRIPT_OBJECT(item);
  scriptVar *params[1] = {&a};
  return GET_SCRIPT_INT(WASABI_API_MAKI->maki_callFunction(getScriptObject(), getitemrecty_id, params));
}

int C_GuiTree::getItemRectW(ScriptObject *item) {
  ASSERT(inited);
  scriptVar a = MAKE_SCRIPT_OBJECT(item);
  scriptVar *params[1] = {&a};
  return GET_SCRIPT_INT(WASABI_API_MAKI->maki_callFunction(getScriptObject(), getitemrectw_id, params));
}

int C_GuiTree::getItemRectH(ScriptObject *item) {
  ASSERT(inited);
  scriptVar a = MAKE_SCRIPT_OBJECT(item);
  scriptVar *params[1] = {&a};
  return GET_SCRIPT_INT(WASABI_API_MAKI->maki_callFunction(getScriptObject(), getitemrecth_id, params));
}

int C_GuiTree::loaded=0;
int C_GuiTree::onwantautocontextmenu_id=0;
int C_GuiTree::onmousewheelup_id=0;
int C_GuiTree::onmousewheeldown_id=0;
int C_GuiTree::oncontextmenu_id=0;
int C_GuiTree::onchar_id=0;
int C_GuiTree::onitemrecvdrop_id=0;
int C_GuiTree::onlabelchange_id=0;
int C_GuiTree::onitemselected_id=0;
int C_GuiTree::onitemdeselected_id=0;
int C_GuiTree::getnumrootitems_id=0;
int C_GuiTree::enumrootitem_id=0;
int C_GuiTree::jumptonext_id=0;
int C_GuiTree::ensureitemvisible_id=0;
int C_GuiTree::getcontentswidth_id=0;
int C_GuiTree::getcontentsheight_id=0;
int C_GuiTree::addtreeitem_id=0;
int C_GuiTree::removetreeitem_id=0;
int C_GuiTree::movetreeitem_id=0;
int C_GuiTree::deleteallitems_id=0;
int C_GuiTree::expanditem_id=0;
int C_GuiTree::expanditemdeferred_id=0;
int C_GuiTree::collapseitem_id=0;
int C_GuiTree::collapseitemdeferred_id=0;
int C_GuiTree::selectitem_id=0;
int C_GuiTree::selectitemdeferred_id=0;
int C_GuiTree::delitemdeferred_id=0;
int C_GuiTree::hiliteitem_id=0;
int C_GuiTree::unhiliteitem_id=0;
int C_GuiTree::getcuritem_id=0;
int C_GuiTree::hittest_id=0;
int C_GuiTree::edititemlabel_id=0;
int C_GuiTree::canceleditlabel_id=0;
int C_GuiTree::setautoedit_id=0;
int C_GuiTree::getautoedit_id=0;
int C_GuiTree::getbylabel_id=0;
int C_GuiTree::setsorted_id=0;
int C_GuiTree::getsorted_id=0;
int C_GuiTree::sorttreeitems_id=0;
int C_GuiTree::getsibling_id=0;
int C_GuiTree::setautocollapse_id=0;
int C_GuiTree::setfontsize_id=0;
int C_GuiTree::getfontsize_id=0;
int C_GuiTree::getnumvisiblechilditems_id=0;
int C_GuiTree::getnumvisibleitems_id=0;
int C_GuiTree::enumvisibleitems_id=0;
int C_GuiTree::enumvisiblechilditems_id=0;
int C_GuiTree::enumallitems_id=0;
int C_GuiTree::getitemrectx_id=0;
int C_GuiTree::getitemrecty_id=0;
int C_GuiTree::getitemrectw_id=0;
int C_GuiTree::getitemrecth_id=0;
