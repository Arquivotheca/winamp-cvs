<Ode:HelperStandaloneTemplate classname="*ScriptObject" inherit="parallel" desc="Scriptable Object" >

<!-- Wasabi Script Object template -->


  <!-- Typemap to go from commonly used cpp types to script types, anything not listed assumes that the type
       is a script object - if it is not, a compiler error is issued -->

  <typemap id="cpptoscript">

   <map default="OBJECT"/>

   <map from="bool" to="BOOL"/>
   <map from="boolean" to="BOOL"/>
   <map from="byte" to="INT"/>
   <map from="char" to="INT"/>
   <map from="hyper" to="INT"/>
   <map from="long" to="INT"/>
   <map from="short" to="INT"/>
   <map from="small" to="INT"/>
   <map from="int" to="INT"/>
   <map from="float" to="FLOAT"/>
   <map from="const char *" to="STRING"/>
   <map from="String" to="STRING"/>
   <map from="double" to="DOUBLE"/>
   <map from="void" to="VOID"/>

   <map from="OSMODULEHANDLE" to="INT"/>
   <map from="OSWINDOWHANDLE" to="INT"/>
  </typemap>

<module id="h" filename="*SO.h">

// ----------------------------------------------------------------------------<br/>
// Generated by ScriptObjectFactory [<datetime/>]<br/>
// <br/>
// File        : <moduledata data="filename"/><br/>
// Class       : <class data="classlayer"/><br/>
// class layer : Automatic Object Scripting
// ----------------------------------------------------------------------------<br/>
<br/>

<!-- compiler safeguards -->

#ifndef __<class data="classlayer" ucase="1"/>_H<br/>
#define __<class data="classlayer" ucase="1"/>_H<br/>
<br/>

<autoheader/><br/>
#include %3Capi/script/objects/rootobj.h%3E<br/>
#include %3Capi/script/objcontroller.h%3E<br/>
<br/>

<if text="%%ScriptClassName" match="">
 <pset id="ScriptClassName" value="$(class.name)"/>
</if>

<if text="%%ScriptAncestorclass" match="">
 <pset id="ScriptAncestorClass" value="RootObjectInstance"/>
</if>

<if text="%%ScriptAncestorObject" match="">
 <pset id="ScriptAncestorObject" value="Object"/>
</if>

#define <class data="name" ucase="1"/>_SCRIPTPARENT <pget id="ScriptAncestorClass"/><br/>
#define <class data="name" ucase="1"/>_SCRIPTPARENTCLASS "<pget id="ScriptAncestorObject"/>"<br/>
<br/>

<!-- custom header codeblocks -->
<foreach objects="codeblocks" type="script.header.h">
  <codeblock data="block"/>
  <br/>
</foreach>

<!-- class declaration -->

// ----------------------------------------------------------------------------<br/>
// {<class data="layerguid"/>}<br/> <!-- this creates a guid if none exists for this class -->
static const GUID <class data="name"/>ScriptGuid =<br/> 
<class data="layercguid"/>;<br/> 
// -----------------------------------------------------------------------------<br/>
<br/>
class <class data="classlayer"/>
<!-- <deriveancestor moreancestors="1"/> -->
%20: public <class data="name" ucase="1"/>_SCRIPTPARENT<ob/><br/>
<!-- <indent> -->

  <!-- custom class codeblocks -->

  <foreach objects="codeblocks" type="script">
   <codeblock data="scope"/>
   <indent>
      <codeblock data="block"/>
      <br/>
   </indent>  
  </foreach>

  protected:<br/>
  <indent>
  <class data="classlayer"/>();<br/>
  virtual ~<class data="classlayer"/>();<br/>
  <br/>
  <foreach objects="methods">
    <skip objects="methods" type="ctor" not="1"/>
    <skip objects="methods" type="defaultctor"/>
    <class data="classlayer"/>
    (
    <foreach objects="params">
      <forcomma/>
      <param data="type"/>
      <param data="name"/>
      <param data="defval"/>
    </foreach>
    );<br/>
  </foreach>
  </indent>

  public:<br/>
  <indent>
  void <class data="classlayer" lclead="1"/>_init();<br/>
  </indent>

  <br/>
  <foreach objects="methods">
    <method data="scope"/>
    <skip objects="methods" type="ctor|dtor"/>
    <skip objects="methods" type="script|event" not="1" op="and"/>
    <indent>
      virtual <method data="returntype"/>script_<method data="name"/>
      (
      <foreach objects="params">
        <forcomma/>
        <param data="type"/>
        <param data="name"/>
        <param data="defval"/>
      </foreach>
      );<br/>
    </indent>
  </foreach>

<!-- </indent> -->
<cb/>;<br/>
<br/>

// -----------------------------------------------------------------------------<br/>
class <class data="name"/>ScriptController : public ScriptObjectControllerI<ob/><br/>
public:<br/>
<br/>
<indent>
  virtual const char *getClassName();<br/>
  virtual const char *getAncestorClassName();<br/>
  virtual ScriptObjectController *getAncestorController();<br/>
  virtual int getNumFunctions();<br/>
  virtual const function_descriptor_struct *getExportedFunctions();<br/>
  virtual GUID getClassGuid();<br/>
  virtual ScriptObject *instantiate();<br/>
  virtual void destroy(ScriptObject *o);<br/>
  virtual void *encapsulate(ScriptObject *o);<br/>
  virtual void deencapsulate(void *o);<br/>
</indent>
<br/>
public:<br/>
<indent>
<foreach objects="methods">
  <skip objects="methods" type="ctor|dtor"/>
  <skip objects="methods" type="script" not="1"/>
  static scriptVar script_<method data="name"/>(SCRIPT_FUNCTION_PARAMS, ScriptObject *_pSO<foreach objects="params">, scriptVar%20<param data="name"/></foreach>);<br/>
</foreach>
<br/>
</indent>
private:
<indent>
  static function_descriptor_struct exportedFunctions[];<br/>
</indent>
<cb/>;<br/>
<br/>
extern <class data="name"/>ScriptController *<class data="name" lclead="1"/>ScriptController;<br/>

// ----------------------------------------------------------------------------<br/>

<br/>

<!-- custom footer codeblocks -->
<foreach objects="codeblocks" type="script.footer.h">
  <codeblock data="block"/>
  <br/>
</foreach>

#endif // __<class data="classlayer" ucase="1"/>_H<br/>

</module>

<!-- cpp file -->

<module id="cpp" filename="*SO.cpp">
// ----------------------------------------------------------------------------<br/>
// Generated by ScriptObjectFactory [<datetime/>]<br/>
// <br/>
// File        : <moduledata data="filename"/><br/>
// Class       : <class data="classlayer"/><br/>
// class layer : Automatic Object Scripting
// ----------------------------------------------------------------------------<br/>
<stdafx/>
<br/>
#include "<class data="name"/>SO.h"<br/>
#include "<class data="ImplementationHeader"/>"
<br/>

<!-- custom header codeblocks -->
<foreach objects="codeblocks" type="script.header.cpp">
  <codeblock data="block"/>
  <br/>
</foreach>

<br/>
// ScriptController Instance
static <class data="name"/>ScriptController _<class data="name" lclead="1"/>ScriptController;
<class data="name"/>ScriptController *<class data="name" lclead="1"/>ScriptController = %26_<class data="name" lclead="1"/>ScriptController;

// Function Descriptor Table
function_descriptor_struct <class data="name"/>ScriptController::exportedFunctions[] = <ob/><br/>
<indent>
  <foreach objects="methods">
    <skip objects="methods" type="ctor|dtor"/>
    <skip objects="methods" type="script" not="1"/>
    { "<method data="name"/>", <method data="numparams"/>, script_<method data="name"/>%20},<br/>
  </foreach>
</indent>
<cb/>;<br/>
<br/>

// Script Object Methods<br/>
<class data="classlayer"/>::<class data="classlayer"/>() <ob/><br/>
<indent>
  if (!getScriptObject()) return;<br/>
  <class data="classlayer" lclead="1"/>_init();<br/>
</indent>
<cb/><br/>
<br/>

<class data="classlayer"/>::~<class data="classlayer"/>() {<br/>
}<br/>
<br/>

void <class data="classlayer"/>::<class data="classlayer" lclead="1"/>_init() <ob/><br/>
<indent>
  // Assign the script interface to this instance.<br/>
  getScriptObject()->vcpu_setInterface(<class data="name"/>ScriptGuid, (void *)static_cast%3C<class data="implname"/> *%3E(this));<br/>
  // Assign the class name to this instance.<br/>
  getScriptObject()->vcpu_setClassName("<pget id="ScriptClassName"/>");<br/>
  // Assign the controller instance to this script object instance.<br/>
  getScriptObject()->vcpu_setController(<class data="name" lclead="1"/>ScriptController);<br/>
</indent>
<cb/><br/>
<br/>

// Script Object Methods<br/>
<br/>

<foreach objects="methods">
  <skip objects="methods" type="ctor|dtor"/>
  <skip objects="methods" type="script|event" not="1" op="and"/>
  <method data="returntype"/><class data="classlayer"/>::script_<method data="name"/>
  (
  <foreach objects="params">
    <forcomma/>
    <param data="type"/>
    <param data="name"/>
    <param data="defval"/>
  </foreach>
  )<ob/><br/>
  <indent>
    <if object="methods" isoftype="void" not="1">return GET_SCRIPT_<map type="$(method.returntype)" map="cpptoscript" trim="1" basemapping="1"/>(</if>
    <class data="name"/>ScriptController::script_<method data="name"/>
    (SCRIPT_CALL, getScriptObject()
    <foreach objects="params">
     <set id="pmap">
      <map type="$(param.type)" map="cpptoscript" trim="1" basemapping="1"/>
     </set>
      , MAKE_SCRIPT_<get id="pmap"/>(<param data="name"/>
     <if text="$pmap" match="OBJECT">
      ->getScriptObject()
     </if>
     )
    </foreach>
    )
    <if object="methods" isoftype="void" not="1">)</if>
    ;<br/>
  </indent>
  <cb/><br/>
  <br/>
</foreach>


<foreach objects="methods">
  <skip objects="methods" type="ctor|dtor"/>
  <skip objects="methods" type="script" not="1"/>
  scriptVar /*<method data="returntype"/>*/ <class data="name"/>ScriptController::script_<method data="name"/>
  (SCRIPT_FUNCTION_PARAMS, ScriptObject *_pSO
  <foreach objects="params">
    , scriptVar /*<param data="type"/>*/%20
    <param data="name"/>
  </foreach>
  )
  <ob/><br/>
  <indent>
    <if object="methods" isoftype="event">
      // Begin all script methods with the init block<br/>
      SCRIPT_FUNCTION_INIT;<br/>
      // Honnor C++ hooks<br/>
      PROCESS_HOOKS<method data="numparams"/>(_pSO, <class data="name" lclead="1"/>ScriptController<foreach objects="params">, <param data="name"/></foreach>);<br/>
      // If there are no script hooks to execute, we abort here.<br/>
      SCRIPT_FUNCTION_CHECKABORTEVENT;<br/>
      // Otherwise we execute the script methods by calling this.<br/>
      SCRIPT_EXEC_EVENT<method data="numparams"/>(_pSO<foreach objects="params">, <param data="name"/></foreach>);<br/>
    <else>
      // Begin all script methods with the init block.<br/>
      SCRIPT_FUNCTION_INIT;<br/>
      // Find the proper pointer for the "this" object, _pSO.<br/>
      <class data="implname"/> *_pObj = static_cast%3C<class data="implname"/> *%3E(_pSO->vcpu_getInterface(<class data="name"/>ScriptGuid));<br/>
      if (_pObj)<ob/><br/>
      <if object="methods" isoftype="void">
        <indent>
          // Then properly call the hosted object;<br/>
          _pObj-><method data="name"/>
          (
          <foreach objects="params">
            <forcomma/>
            GET_SCRIPT_<map type="$(param.type)" map="cpptoscript" trim="1" basemapping="1"/>(<param data="name"/>)
          </foreach>
          );<br/>
        </indent>
        <cb/><br/>
        RETURN_SCRIPT_VOID;<br/>
        <else>
          <indent>
            return MAKE_SCRIPT_<map type="$(method.returntype)" map="cpptoscript" trim="1" basemapping="1"/>(_pObj-><method data="name"/>
            (
            <foreach objects="params">
              <forcomma/>
              GET_SCRIPT_<map type="$(param.type)" map="cpptoscript" trim="1" basemapping="1"/>(<param data="name"/>)
            </foreach>
            ));<br/>
          </indent>
          <cb/><br/>
          <set id="mmap">
           <map type="$(method.returntype)" map="cpptoscript" trim="1" basemapping="1"/>
          </set>
          <if text="$mmap" match="STRING">
            return MAKE_SCRIPT_STRING("");<br/>
            <else>
              <if text="$mmap" match="OBJECT">
                return MAKE_SCRIPT_OBJECT(NULL);<br/>
                <else>
                  RETURN_SCRIPT_ZERO;<br/>
                </else>
              </if>
            </else>
          </if>
        </else>
      </if>
    </else>
  </if>
  </indent>
  <cb/><br/>
  <br/>
</foreach>

// Script Controller <br/>
<br/>

// This method returns the human readable name of the class in script files.<br/>
const char *<class data="name"/>ScriptController::getClassName()<ob/><br/>
<indent>
  return "<pget id="ScriptClassName"/>";<br/>
</indent>
<cb/><br/>
<br/>

// This method returns the human readable name of the parent of this class.<br/>
const char *<class data="name"/>ScriptController::getAncestorClassName()<ob/><br/>
<indent>
  return <class data="name" ucase="1"/>_SCRIPTPARENTCLASS;<br/>
</indent>
<cb/><br/>
<br/>

// This method returns the controller object for the parent class.<br/>
ScriptObjectController *<class data="name"/>ScriptController::getAncestorController()<ob/><br/>
<indent>
  <if text="%%ScriptAncestorGuid" match="">
    return NULL;<br/>
    <else>
    return WASABI_API_MAKI->maki_getController(<pget id="ScriptAncestorGuid"/>);<br/>
    </else>
  </if>
</indent>
<cb/><br/>
<br/>

// This method returns the number of methods this class publishes.<br/>
int <class data="name"/>ScriptController::getNumFunctions()<ob/><br/>
<indent>
  return sizeof(exportedFunctions) / sizeof(function_descriptor_struct);<br/>
</indent>
<cb/><br/>
<br/>

// This method returns the block of published function descriptors.<br/>
const function_descriptor_struct *<class data="name"/>ScriptController::getExportedFunctions()<ob/><br/>
<indent>
  return exportedFunctions;<br/>
</indent>
<cb/><br/>
<br/>

// This method returns the GUID assigned to this script class.<br/>
GUID <class data="name"/>ScriptController::getClassGuid()<ob/><br/>
<indent>
  return <class data="name"/>ScriptGuid;<br/>
</indent>
<cb/><br/>
<br/>

// This method creates and returns a new script class instance.<br/>
ScriptObject *<class data="name"/>ScriptController::instantiate()<ob/><br/>
<indent>
  <class data="implname"/> *_pObj = new <class data="implname"/>();<br/>
  ASSERT(_pObj != NULL);<br/>
  return _pObj-><class data="classlayer"/>::getScriptObject();<br/>
</indent>
<cb/><br/>
<br/>

// This method deletes a given script class instance.<br/>
void <class data="name"/>ScriptController::destroy(ScriptObject *o)<ob/><br/>
<indent>
  <class data="implname"/> *_pObj = static_cast%3C<class data="implname"/> *%3E(o->vcpu_getInterface(<class data="name"/>ScriptGuid));<br/>
  ASSERT(_pObj != NULL);<br/>
  delete _pObj;<br/>
</indent>
<cb/><br/>
<br/>

// This method returns an encapsulated interface for the given instance.<br/>
void *<class data="name"/>ScriptController::encapsulate(ScriptObject *o)<ob/><br/>
<indent>
  // No automatic encapsulation<br/>
  return NULL;<br/>
</indent>
<cb/><br/>
<br/>

// This method frees a previously encapsulated interface.<br/>
void <class data="name"/>ScriptController::deencapsulate(void *o)<ob/><br/>
<indent>
</indent>
<cb/><br/>
<br/>

<!-- custom header codeblocks -->
<foreach objects="codeblocks" type="script.footer.cpp">
  <codeblock data="block"/>
  <br/>
</foreach>

</module>

<module id="mi" filename="*.mi">
// ----------------------------------------------------------------------------<br/>
// Generated by MIFactory [<datetime/>]<br/>
// ----------------------------------------------------------------------------<br/>
<br/>

#ifndef _<class data="name" ucase="1"/>_MI<br/>
#define _<class data="name" ucase="1"/>_MI<br/>
<br/>
<br/>
#ifndef included<br/>
#error this file needs to be #included<br/>
#endif<br/>
<br/>
extern class @{<class data="layerguid"/>}@ <pget id="ScriptAncestorObject"/>%20<pget id="ScriptClassName"/>;<br/>
<br/>

<foreach objects="methods">
  <skip objects="methods" type="ctor|dtor"/>
  <skip objects="methods" type="script" not="1"/>
  extern%20
  <if object="methods" isoftype="void" not="1">
    <map type="$(method.returntype)" map="cpptoscript" uclead="2" basemapping="1"/>%20
  </if>
  <pget id="ScriptClassName"/>.<method data="name"/>(
  <foreach objects="params">
    <forcomma/>
    <map type="$(param.type)" map="cpptoscript" uclead="2" basemapping="1"/> <param data="name"/>
  </foreach>);<br/>
</foreach>
<br/>
#endif<br/>

</module> 

</Ode:HelperStandaloneTemplate>
