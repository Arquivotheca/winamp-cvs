<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML>
<HEAD>
<META http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<TITLE>PrimoSDK Guide - Chapter 3</TITLE>
<!-- PrimoSDK version 2 -->
<!-- HTML version generated by DelPhi on 050725 -->
<!-- (c) Sonic Solutions. All Rights Reserved. -->
<LINK REL=STYLESHEET TYPE="text/css" HREF="PS_Styles-MAIN.css">
</HEAD>
<BODY>
<A ID="chapter"><IMG SRC="PS_Images/PS_Banner.jpg" WIDTH=520 HEIGHT=72></A>
<P CLASS="IndentSans" ALIGN="Right">&#169; Sonic Solutions<SUP>&#153;</SUP>. All Rights Reserved.</P>
<P CLASS="Heading1"><A ID="Working With PrimoSDK">3 &nbsp;Working With PrimoSDK</A></P>
<P CLASS="IndentSerif">This chapter provides information about working with the functions used to accomplish common tasks handled by PrimoSDK. Example code is provided for two such tasks. The following topics are covered:</P>
<UL CLASS="IndentSerif_List"><LI><A HREF="#Using Handles">Using Handles</A></LI>
<LI><A HREF="#Retrieving Information">Retrieving Information</A></LI>
<LI><A HREF="#Getting Data from Disc">Getting Data from Disc</A></LI>
<LI><A HREF="#Recording to Disc">Recording to Disc</A></LI>
<LI><A HREF="#Creating Image Files">Creating Image Files</A></LI>
<LI><A HREF="#Data CD Example Code">Data CD Example Code</A></LI>
<LI><A HREF="#Audio CD Example Code">Audio CD Example Code</A></LI>
<LI><A HREF="#Trace Logging">Trace Logging</A></LI></UL>
<P CLASS="IndentSerif">For a complete look at the calls required to perform various tasks, refer to the <A HREF="PS_Guide_6.htm#PrimoSDK Function Reference"><SPAN CLASS="Arial_Inline"><B>PrimoSDK Function Reference</B></SPAN></A>.</P>
<HR SIZE=2 WIDTH="93%"><TABLE width="93%" align=center border=0><TBODY><col><col width=50><TR><TD CLASS="Heading2"><A ID="Using Handles">3.1 &nbsp;Using Handles</A></TD><TD class="IndentSansVisited">go: &nbsp;<A HRef="#chapter">top</A></TD></TR></TBODY></TABLE>
<P CLASS="IndentSerif">PrimoSDK allows use of up to 64 drives simultaneously for a given task, as well as supporting the use of a theoretically unlimited number of devices for different, independent tasks at the same time. The key mechanism enabling this capability is the use of handles (unique resource identifiers) to control each operation. Handles are assigned using <A HREF="PS_Guide_6.htm#PrimoSDK_GetHandle">PrimoSDK_GetHandle</A>, and released with <A HREF="PS_Guide_6.htm#PrimoSDK_ReleaseHandle">PrimoSDK_ReleaseHandle</A>.<BR>
<BR>
The following table illustrates the calls involved in setting up two parallel operations, each with their own handle:</P>
<TABLE ALIGN="center" WIDTH="95%" BORDER="1" CELLSPACING="0" CELLPADDING="5" CLASS="TableSans"><TBODY VALIGN="top">
<TR><TD COLSPAN=2>PrimoSDK_Init(...)</TD></TR>
<TR><TD>PrimoSDK_GetHandle(&Handle1)</TD>
<TD> PrimoSDK_GetHandle(&Handle2)</TD></TR>
<TR><TD><I>... operations with Handle1...</I></TD>
<TD><I> ... operations with Handle2...</I></TD></TR>
<TR><TD>PrimoSDK_ReleaseHandle(Handle1)</TD>
<TD> PrimoSDK_ReleaseHandle(Handle2)</TD></TR>
<TR><TD COLSPAN=2>PrimoSDK_End()</TD></TR></TBODY></TABLE>
<P CLASS="IndentSerif"><B>NOTES</B>:<BR>
<B>&#187;</B> It&#39;s important for the caller to ensure that different operations associated with different handles do not engage the same drive (or the same SCSI&#47;IDE bus) simultaneously in a way that might disrupt recording.<BR>
<B>&#187; </B>In actual practice, PrimoSDK&#39;s support for multiple simultaneous operations will be limited by the following hardware-related factors:<BR>
- Operations that involve streaming are limited by the data transfer rate of the buss. Streaming performance will suffer if the buss is overloaded with devices (usually much fewer than 64 depending on the buss type).<BR>
- The more simultaneous processes, the higher the memory requirements.<BR>
- The source of the data is limited by processor speed and source device speed, whether hard drive or optical disc. </P>
<HR SIZE=2 WIDTH="93%"><TABLE width="93%" align=center border=0><TBODY><col><col width=50><TR><TD CLASS="Heading2"><A ID="Retrieving Information">3.2 &nbsp;Retrieving Information</A></TD><TD class="IndentSansVisited">go: &nbsp;<A HRef="#chapter">top</A></TD></TR></TBODY></TABLE>
<P CLASS="IndentSerif">PrimoSDK functions allow retrieval of several different types of information about drives, discs, and process status:</P>
<UL CLASS="IndentSerif_List"><LI>For calls related to information about drives on the system, including their speed and status, see the calls in <A HREF="PS_Guide_6.htm#Drive Information and Status"><SPAN CLASS="Arial_Inline"><B>Drive Information and Status</B></SPAN></A> in Chapter 6.</LI>
<LI>For calls related to information about media contained in the system&#39;s various drives, see <A HREF="PS_Guide_6.htm#Disc and Image Information"><SPAN CLASS="Arial_Inline"><B>Disc and Image Information</B></SPAN></A> in Chapter 6.</LI>
<LI>To check on the status of an operation, use <A HREF="PS_Guide_6.htm#PrimoSDK_RunningStatus">PrimoSDK_RunningStatus</A> until the operation is completed, after which <A HREF="PS_Guide_6.htm#PrimoSDK_UnitStatus">PrimoSDK_UnitStatus</A> may be used to check the result on a given drive.</LI></UL>
<HR SIZE=2 WIDTH="93%"><TABLE width="93%" align=center border=0><TBODY><col><col width=50><TR><TD CLASS="Heading2"><A ID="Getting Data from Disc">3.3 &nbsp;Getting Data from Disc</A></TD><TD class="IndentSansVisited">go: &nbsp;<A HRef="#chapter">top</A></TD></TR></TBODY></TABLE>
<P CLASS="IndentSerif">PrimoSDK offers a variety of functions that allow the host application to access various forms of content contained on disc (see <A HREF="PS_Guide_6.htm#Reading and Extracting from Disc"><SPAN CLASS="Arial_Inline"><B>Reading and Extracting from Disc</B></SPAN></A> in Chapter 6):</P>
<UL CLASS="IndentSerif_List"><LI>For copying an entire source disc to a Global Image (<SPAN CLASS="Courier_New_Inline">.GI</SPAN>) file, see <A HREF="PS_Guide_6.htm#PrimoSDK_ReadGI">PrimoSDK_ReadGI</A>.</LI>
<LI>For reading specific sectors from a source disc, see <A HREF="PS_Guide_6.htm#PrimoSDK_OpenReadDisc">PrimoSDK_OpenReadDisc</A> and <A HREF="PS_Guide_6.htm#PrimoSDK_ReadDisc">PrimoSDK_ReadDisc</A>. </LI>
<LI>For extracting audio from an Audio CD, see <A HREF="PS_Guide_6.htm#PrimoSDK_ExtractAudioTrack">PrimoSDK_ExtractAudioTrack</A>, or <A HREF="PS_Guide_6.htm#PrimoSDK_ExtractAudioToBuffer">PrimoSDK_ExtractAudioToBuffer</A> and <A HREF="PS_Guide_6.htm#PrimoSDK_NextExtractAudioBuffer">PrimoSDK_NextExtractAudioBuffer</A>.</LI>
<LI>For retrieving CD Text info from an Audio CD, see <A HREF="PS_Guide_6.htm#PrimoSDK_CDTextInfo">PrimoSDK_CDTextInfo</A> or <A HREF="PS_Guide_6.htm#PrimoSDK_CDTextInfoEJ">PrimoSDK_CDTextInfoEJ</A>.</LI>
<LI>For retrieving the International Standard Recording Code for a track on an Audio CD, see <A HREF="PS_Guide_7.htm#PrimoSDK_GetISRC">PrimoSDK_GetISRC</A>.(requires PrimoSDK&#39;s optional Advanced Audio calls, which are licensed separately from the standard version of PrimoSDK).</LI></UL>
<HR SIZE=2 WIDTH="93%"><TABLE width="93%" align=center border=0><TBODY><col><col width=50><TR><TD CLASS="Heading2"><A ID="Recording to Disc">3.4 &nbsp;Recording to Disc</A></TD><TD class="IndentSansVisited">go: &nbsp;<A HRef="#chapter">top</A></TD></TR></TBODY></TABLE>
<P CLASS="IndentSerif">PrimoSDK supports a comprehensive set of operations related to the writing of CDs and DVDs:</P>
<UL CLASS="IndentSerif_List"><LI>For functions used to assert PrimoSDK&#39;s control over drives so that record operations are not interfered with by other applications, see <A HREF="PS_Guide_6.htm#Drive Control"><SPAN CLASS="Arial_Inline"><B>Drive Control</B></SPAN></A> in Chapter 6.</LI>
<LI>For functions used to erase a disc, copy a disc, or write to disc from a generic image or Global Image (<SPAN CLASS="Courier_New_Inline">.GI</SPAN>) file, see <A HREF="PS_Guide_6.htm#General Disc Write and Verify"><SPAN CLASS="Arial_Inline"><B>General Disc Write and Verify</B></SPAN></A> in Chapter 6.</LI>
<LI>For functions used to build a data structure and then record it to disc, see <A HREF="PS_Guide_6.htm#Data CD and DVD Images"><SPAN CLASS="Arial_Inline"><B>Data CD and DVD Images</B></SPAN></A> in Chapter 6. Sample code illustrating the creation and writing of a very simple data CD is provided below in <A HREF="#Data CD Example Code"><SPAN CLASS="Arial_Inline"><B>Data CD Example Code</B></SPAN></A>. </LI>
<LI>For functions used to build an Audio CD structure and then record it to disc in Disc-at-Once (DAO) mode, see <A HREF="PS_Guide_6.htm#Audio CD Images"><SPAN CLASS="Arial_Inline"><B>Audio CD Images</B></SPAN></A> in Chapter 6. Sample code illustrating the creation and writing of a very simple Audio CD is provided below in <A HREF="#Audio CD Example Code"><SPAN CLASS="Arial_Inline"><B>Audio CD Example Code</B></SPAN></A>.</LI>
<LI>For recording an audio file to Audio CD in Track-at-Once (TAO) mode, see <A HREF="PS_Guide_6.htm#PrimoSDK_WriteAudioTrack">PrimoSDK_WriteAudioTrack</A>.</LI>
<LI>For functions related to recording a Video CD that is based on a standard basic template that is provided as part of the PrimoSDK toolkit (the <SPAN CLASS="Courier_New_Inline">VCD.DTA </SPAN>file), see <A HREF="PS_Guide_6.htm#Video CD Images"><SPAN CLASS="Arial_Inline"><B>Video CD Images</B></SPAN></A> in Chapter 6. The calls are used to first build a Video CD structure and then record it to disc.</LI>
<LI>To record a Video CD that is more sophisticated than the simple structure allowed by PrimoSDK&#39;s standard Video CD template, the VCD is authored independently of PrimoSDK, then incorporated into a data CD structure (see <A HREF="PS_Guide_6.htm#Data CD and DVD Images"><SPAN CLASS="Arial_Inline"><B>Data CD and DVD Images</B></SPAN></A> in Chapter 6).</LI></UL>
<HR SIZE=2 WIDTH="93%"><TABLE width="93%" align=center border=0><TBODY><col><col width=50><TR><TD CLASS="Heading2"><A ID="Creating Image Files">3.5 &nbsp;Creating Image Files</A></TD><TD class="IndentSansVisited">go: &nbsp;<A HRef="#chapter">top</A></TD></TR></TBODY></TABLE>
<P CLASS="IndentSerif">PrimoSDK supports the building of data structures that may be either written directly to disc (see<B> <SPAN CLASS="Arial_Inline"><A HREF="#Data CD Example Code">Data CD Example Code</B></SPAN></A> below) or saved to hard disk as a generic or Global Image (<SPAN CLASS="Courier_New_Inline">.GI</SPAN>) file. The procedure for saving a data structure as an image file involves the following steps:</P>
<OL CLASS="IndentSerif_NumList"><LI>The toolkit is initialized (<A HREF="PS_Guide_6.htm#PrimoSDK_Init">PrimoSDK_Init</A>) and a handle is retrieved (<A HREF="PS_Guide_6.htm#PrimoSDK_GetHandle">PrimoSDK_GetHandle</A>).</LI>
<LI>A data structure is started with <A HREF="PS_Guide_6.htm#PrimoSDK_NewImage">PrimoSDK_NewImage</A> or <A HREF="PS_Guide_6.htm#PrimoSDK_NewImageWCS">PrimoSDK_NewImageWCS</A>. The structure is populated with folders (<A HREF="PS_Guide_6.htm#PrimoSDK_AddFolder">PrimoSDK_AddFolder</A> or <A HREF="PS_Guide_6.htm#PrimoSDK_AddFolderWCS">PrimoSDK_AddFolderWCS</A>) and files (<A HREF="PS_Guide_6.htm#PrimoSDK_AddFile">PrimoSDK_AddFile</A> or <A HREF="PS_Guide_6.htm#PrimoSDK_AddFileWCS">PrimoSDK_AddFileWCS</A>). </LI>
<LI>The save operation is started (<A HREF="PS_Guide_6.htm#PrimoSDK_SaveImage">PrimoSDK_SaveImage</A> or <A HREF="PS_Guide_6.htm#PrimoSDK_SaveGI">PrimoSDK_SaveGI</A>) and proceeds in its own thread. As the operation runs, its status is queried (<A HREF="PS_Guide_6.htm#PrimoSDK_RunningStatus">PrimoSDK_RunningStatus</A>) and the current progress is displayed in a control. Status inquiries are separated by an interval of one second or more to avoid &quot;clogging&quot; the machine.</LI>
<LI>Finally, the data structure is terminated (<A HREF="PS_Guide_6.htm#PrimoSDK_CloseImage">PrimoSDK_CloseImage</A>), the handle is released (<A HREF="PS_Guide_6.htm#PrimoSDK_ReleaseHandle">PrimoSDK_ReleaseHandle</A>), and PrimoSDK is closed (<A HREF="PS_Guide_6.htm#PrimoSDK_End">PrimoSDK_End</A>).</LI></OL>
<P CLASS="SubHead_Sans12"><A ID="Image type">Image type</A></P>
<P CLASS="IndentSerif">If the save operation is PrimoSDK_SaveGI, the type (CD or DVD) of image to save is determined by settings in the PrimoSDK_NewImage or PrimoSDK_NewImageWCS call that created the structure:</P>
<UL CLASS="IndentSerif_List"><LI>If the parameter <I>pdwUnits</I> specifies record drives, then PrimoSDK_NewImage or PrimoSDK_NewImageWCS checks those drives to see if they contain DVD media:<BR>
- if the drives do contain DVD media, then the result of a call to PrimoSDK_SaveGI will be a DVD image;<BR>
- if the drives do not contain DVD media, the result will be a CD image.</LI>
<LI>If the parameter <I>pdwUnits</I> is passed as only &quot;<SPAN CLASS="Courier_New_Inline">0xFFFFFFFF</SPAN>&quot; (no units are specified because the structure will not be written directly to disc), then:<BR>
- if the flag PRIMOSDK_DVDIMAGE is included in <I>dwFlags</I>, the result of a call to PrimoSDK_SaveGI will be a DVD image;<BR>
- if PRIMOSDK_DVDIMAGE is not included the result will be a CD image.</LI></UL>
<P CLASS="IndentSerif">If the save operation is PrimoSDK_SaveImage, the data structure is saved without any media information (including image type), so values of the PrimoSDK_NewImage&#47;PrimoSDK_NewImageWCS parameters <I>pdwUnits</I> and <I>dwFlags</I> have no effect.<BR>
<BR>
<B>NOTE</B>: To discover the media type and media format of an existing Global Image file, see <A HREF="PS_Guide_6.htm#PrimoSDK_GIInfoEx">PrimoSDK_GIInfoEx</A>.</P>
<HR SIZE=2 WIDTH="93%"><TABLE width="93%" align=center border=0><TBODY><col><col width=50><TR><TD CLASS="Heading2"><A ID="Data CD Example Code">3.6 &nbsp;Data CD Example Code</A></TD><TD class="IndentSansVisited">go: &nbsp;<A HRef="#chapter">top</A></TD></TR></TBODY></TABLE>
<P CLASS="IndentSerif">This section illustrates the creation in C of a simple data disc containing one folder (<SPAN CLASS="Courier_New_Inline">Test Folder</SPAN>) and two files (<SPAN CLASS="Courier_New_Inline">File1.sys </SPAN>and <SPAN CLASS="Courier_New_Inline">File2.sys</SPAN>). The code covers the following general steps:</P>
<OL CLASS="IndentSerif_NumList"><LI>Variables are declared, the toolkit is initialized (<A HREF="PS_Guide_6.htm#PrimoSDK_Init">PrimoSDK_Init</A>), and a handle is retrieved (<A HREF="PS_Guide_6.htm#PrimoSDK_GetHandle">PrimoSDK_GetHandle</A>).</LI>
<LI>A disc information inquiry (<A HREF="PS_Guide_6.htm#PrimoSDK_DiscInfoEx">PrimoSDK_DiscInfoEx</A>) is executed on the arbitrary drive E: to confirm that it contains a disc suitable for recording the data.</LI>
<LI>The drive is tested to confirm that it is available (<A HREF="PS_Guide_6.htm#PrimoSDK_UnitVxBlock">PrimoSDK_UnitVxBlock</A>). If so, the drive is reserved for this operation (PrimoSDK_UnitVxBlock again); if not the operation is ended.</LI>
<LI>To prevent interference with the drive while recording, Auto Insert Notification (AIN) and file system activity are blocked (<A HREF="PS_Guide_6.htm#PrimoSDK_UnitAIN">PrimoSDK_UnitAIN</A>; see also <A HREF="PS_Guide_6.htm#PrimoSDK_UnitLock">PrimoSDK_UnitLock</A>).</LI>
<LI>A data structure is started (<A HREF="PS_Guide_6.htm#PrimoSDK_NewImage">PrimoSDK_NewImage</A> or <A HREF="PS_Guide_6.htm#PrimoSDK_NewImageWCS">PrimoSDK_NewImageWCS</A>), and is populated with one folder (<A HREF="PS_Guide_6.htm#PrimoSDK_AddFolder">PrimoSDK_AddFolder</A> or <A HREF="PS_Guide_6.htm#PrimoSDK_AddFolderWCS">PrimoSDK_AddFolderWCS</A>) and two files (<A HREF="PS_Guide_6.htm#PrimoSDK_AddFile">PrimoSDK_AddFile</A> or <A HREF="PS_Guide_6.htm#PrimoSDK_AddFileWCS">PrimoSDK_AddFileWCS</A>). </LI>
<LI>Recording is started and proceeds in its own thread. As the operation runs, its status is queried (<A HREF="PS_Guide_6.htm#PrimoSDK_RunningStatus">PrimoSDK_RunningStatus</A>) and the current progress is displayed in a control. Status inquiries are separated by an interval of 1 second to avoid &quot;clogging&quot; the machine. When completed, the success of the operation is checked by calling <A HREF="PS_Guide_6.htm#PrimoSDK_UnitStatus">PrimoSDK_UnitStatus</A>.</LI>
<LI>When recording operations are completed successfully, the drive&#39;s tray is opened (<A HREF="PS_Guide_6.htm#PrimoSDK_MoveMedium">PrimoSDK_MoveMedium</A>) and the data structure is terminated (<A HREF="PS_Guide_6.htm#PrimoSDK_CloseImage">PrimoSDK_CloseImage</A>).</LI>
<LI>Next, the AIN and file system activity on the drive is unblocked (PrimoSDK_UnitAIN) and the drive is released (PrimoSDK_UnitVxBlock).</LI>
<LI>Finally, the the handle is released (<A HREF="PS_Guide_6.htm#PrimoSDK_ReleaseHandle">PrimoSDK_ReleaseHandle</A>), and PrimoSDK is closed (<A HREF="PS_Guide_6.htm#PrimoSDK_End">PrimoSDK_End</A>).</LI></OL>
<P CLASS="IndentSerif">Example C code for the set of operations described above is as follows:</P>
<P CLASS="Code">
&#47;&#47; [1a] DECLARATIONS<BR>
DWORD dwRel, dwReply, dwUnit, dwHandle, dwMediumType, dwFlags;<BR>
DWORD dwMediumFormat, dwErasable, dwTracks, dwUsed, dwFree, dwSize, dwCur, dwTot;<BR>
DWORD dwCommand, dwSense, dwASC, dwASCQ;<BR>
DWORD dwUnits[16];<BR>
BYTE szBuf[256];<BR>
<BR>
&#47;&#47; [1b] INITIALIZE AND GET AN HANDLE<BR>
dwReply = PrimoSDK_Init(&dwRel);<BR>
dwReply = PrimoSDK_GetHandle(&dwHandle);<BR>
<BR>
&#47;&#47; [2] SEE IF DRIVE E: (MUST BE A RECORDER) CONTAINS<BR>
&#47;&#47; A DISC VALID FOR ADDING DATA<BR>
dwUnit = 0x46;<BR>
dwReply = PrimoSDK_UnitReady(dwHandle,&dwUnit);<BR>
dwReply = PrimoSDK_DiscInfoEx(dwHandle,&dwUnit,&dwFlags, &dwMediumType,&dwMediumFormat,&dwErasable,&dwTracks,&dwUsed,&dwFree);<BR>
if ( dwMediumType != PRIMOSDK_BLANK && dwMediumType != PRIMOSDK_COMPLIANTGOLD ) {<BR>
MessageBox(hWnd, &quot;We want a blank or an open data disc!&quot;, &quot;PrimoSDK Test&quot;,MB_OK);<BR>
dwReply = PrimoSDK_ReleaseHandle(dwHandle);<BR>
dwReply = PrimoSDK_End();<BR>
break;<BR>
}<BR>
<BR>
&#47;&#47; [3] TEST DRIVE STATUS, RESERVE IF AVAILABLE<BR>
dwReply = PrimoSDK_UnitVxBlock(dwHandle,&dwUnit,PRIMOSDK_TEST,szAppName);<BR>
<BR>
if (dwReply == PRIMOSDK_NOTREADY) &#47;&#47; DRIVE NOT AVAILABLE<BR>
{<BR>
&nbsp;&nbsp;&#47;&#47; ALERT USER THAT DEVICE IS IN USE BY szAppName, END OPERATION<BR>
}<BR>
<BR>
if (dwReply == PRIMOSDK_OK) &#47;&#47; DRIVE IS AVAILABLE<BR>
{<BR>
&nbsp;&nbsp;&#47;&#47; CALL VXBLOCK TO RESERVE THE DRIVE(S).<BR>
&nbsp;&nbsp;dwReply = PrimoSDK_UnitVxBlock(dwHandle, pdwUnit, PRIMOSDK_LOCK, &quot;PrimoSDK Test Application&quot;);<BR>
}<BR>
<BR>
&#47;&#47; [4] BLOCK AIN AND FILE SYSTEM ACTIVITY<BR>
dwReply = PrimoSDK_UnitAIN(dwHandle,&dwUnit,PRIMOSDK_LOCK);<BR>
<BR>
&#47;&#47; [5a] CREATE A NEW DATA STRUCTURE<BR>
dwUnits[0] = 0x46;<BR>
dwUnits[1] = 0xFFFFFFFF;<BR>
dwReply = PrimoSDK_NewImage(dwHandle,dwUnits,&quot;TESTVOLUME&quot;,0,PRIMOSDK_JOLIET,0,&quot;C:\\&quot;);<BR>
<BR>
&#47;&#47; [5b] ADD A FOLDER AND TWO FILES<BR>
dwReply = PrimoSDK_AddFolder(dwHandle,&quot;\\Test Folder&quot;);<BR>
dwReply = PrimoSDK_AddFile(dwHandle,&quot;\\Test Folder\\File1.sys&quot;,&quot;c:\\IO.SYS&quot;);<BR>
dwReply = PrimoSDK_AddFile(dwHandle,&quot;\\Test Folder\\File2.sys&quot;,&quot;c:\\MSDOS.SYS&quot;);<BR>
<BR>
&#47;&#47; [6a] START RECORDING<BR>
dwReply = PrimoSDK_WriteImage(dwHandle,PRIMOSDK_TEST,PRIMOSDK_MAX,&dwSize);<BR>
<BR>
&#47;&#47; [6b] QUERY STATUS WHILE OPERATION IS RUNNING<BR>
while ( PrimoSDK_RunningStatus(dwHandle,PRIMOSDK_GETSTATUS,
 &dwCur,&dwTot) == PRIMOSDK_RUNNING ) {<BR>
wsprintf(szBuf,&quot;Sector %d of %d&quot;,dwCur,dwTot);<BR>
SetDlgItemText(hWnd,IDC_PROGRESS,szBuf);<BR>
Sleep(1000);<BR>
}<BR>
<BR>
&#47;&#47; [6c] BURN COMPLETED; CHECK IF SUCCESSFUL<BR>
dwReply = PrimoSDK_UnitStatus(dwHandle, &dwUnit, &dwCommand, &dwSense, &dwASC, &dwASCQ);<BR>
if (dwReply != PRIMOSDK_OK) {<BR>
&#47;&#47; Notify user that burn failed, providing information<BR>
&#47;&#47; about dwReply and ASC&#47;ASCQ as necessary.<BR>
}<BR>
<BR>
&#47;&#47; [7a] OPEN THE DRIVE TRAY<BR>
dwReply = PrimoSDK_MoveMedium(dwHandle,&dwUnit,
 PRIMOSDK_OPENTRAYEJECT|PRIMOSDK_IMMEDIATE);<BR>
<BR>
&#47;&#47; [7b] CLOSE DATA STRUCTURE<BR>
dwReply = PrimoSDK_CloseImage(dwHandle);<BR>
<BR>
&#47;&#47; [8a] UNBLOCK AIN AND FILE SYSTEM ACTIVITY,<BR>
dwReply = PrimoSDK_UnitAIN(dwHandle,&dwUnit,PRIMOSDK_UNLOCK);<BR>
<BR>
&#47;&#47; [8b] RELEASE DRIVE<BR>
dwReply = PrimoSDK_UnitVxBlock(dwHandle, &dwUnit, PRIMOSDK_UNLOCK, szAppName);<BR>
<BR>
&#47;&#47; [9] RELEASE THE HANDLE AND CLOSE PRIMOSDK<BR>
dwReply = PrimoSDK_ReleaseHandle(dwHandle);<BR>
dwReply = PrimoSDK_End();</P>
<HR SIZE=2 WIDTH="93%"><TABLE width="93%" align=center border=0><TBODY><col><col width=50><TR><TD CLASS="Heading2"><A ID="Audio CD Example Code">3.7 &nbsp;Audio CD Example Code</A></TD><TD class="IndentSansVisited">go: &nbsp;<A HRef="#chapter">top</A></TD></TR></TBODY></TABLE>
<P CLASS="IndentSerif">This section illustrates the creation in C of a simple audio disc containing two tracks from source files <SPAN CLASS="Courier_New_Inline">Chopin.wav </SPAN>and <SPAN CLASS="Courier_New_Inline">Mina.wav</SPAN>. The code covers the following general steps:</P>
<OL CLASS="IndentSerif_NumList"><LI>Variables are declared, the toolkit is initialized (<A HREF="PS_Guide_6.htm#PrimoSDK_Init">PrimoSDK_Init</A>), and a handle is retrieved (<A HREF="PS_Guide_6.htm#PrimoSDK_GetHandle">PrimoSDK_GetHandle</A>).</LI>
<LI>A disc information inquiry (<A HREF="PS_Guide_6.htm#PrimoSDK_DiscInfoEx">PrimoSDK_DiscInfoEx</A>) is executed on the arbitrary drive E: to confirm that it contains a blank disc.</LI>
<LI>The drive is tested to confirm that it is available (<A HREF="PS_Guide_6.htm#PrimoSDK_UnitVxBlock">PrimoSDK_UnitVxBlock</A>). If so, the drive is reserved for this operation (PrimoSDK_UnitVxBlock again); if not the operation is ended.</LI>
<LI>To prevent interference with the drive while recording, Auto Insert Notification (AIN) and file system activity are blocked (<A HREF="PS_Guide_6.htm#PrimoSDK_UnitAIN">PrimoSDK_UnitAIN</A>; see also <A HREF="PS_Guide_6.htm#PrimoSDK_UnitLock">PrimoSDK_UnitLock</A>).</LI>
<LI>An audio structure is started (<A HREF="PS_Guide_6.htm#PrimoSDK_NewAudio">PrimoSDK_NewAudio</A>) and is populated with the source files for the two tracks (<A HREF="PS_Guide_6.htm#PrimoSDK_AddAudioTrack">PrimoSDK_AddAudioTrack</A>).</LI>
<LI>Recording is started and proceeds in its own thread. As the operation runs, its status is queried (<A HREF="PS_Guide_6.htm#PrimoSDK_RunningStatus">PrimoSDK_RunningStatus</A>) and the current progress is displayed in a control. Status inquiries are separated by an interval of 1 second to avoid &quot;clogging&quot; the machine. When completed, the success of the operation is checked by calling <A HREF="PS_Guide_6.htm#PrimoSDK_UnitStatus">PrimoSDK_UnitStatus</A>.</LI>
<LI>When recording operations are completed successfully, the (<A HREF="PS_Guide_6.htm#PrimoSDK_MoveMedium">PrimoSDK_MoveMedium</A>) and the audio structure is terminated (<A HREF="PS_Guide_6.htm#PrimoSDK_CloseAudio">PrimoSDK_CloseAudio</A>).</LI>
<LI>Next, the AIN and file system activity on the drive is unblocked (PrimoSDK_UnitAIN), and the drive is released (PrimoSDK_UnitVxBlock).</LI>
<LI>Finally, the, the handle is released (<A HREF="PS_Guide_6.htm#PrimoSDK_ReleaseHandle">PrimoSDK_ReleaseHandle</A>), and PrimoSDK is closed (<A HREF="PS_Guide_6.htm#PrimoSDK_End">PrimoSDK_End</A>).</LI></OL>
<P CLASS="IndentSerif">Example C code for the set of operations described above is as follows:</P>
<P CLASS="Code"><BR>
&#47;&#47; [1a] DECLARATIONS<BR>
DWORD dwRel, dwReply, dwUnit, dwHandle, dwMediumType, dwFlags;<BR>
DWORD dwMediumFormat, dwErasable, dwTracks, dwUsed, dwFree, dwSize, dwCur, dwTot;<BR>
DWORD dwCommand, dwSense, dwASC, dwASCQ;<BR>
DWORD dwUnits[16];<BR>
BYTE szBuf[256];<BR>
<BR>
&#47;&#47; [1b] INITIALIZE AND GET AN HANDLE<BR>
dwReply = PrimoSDK_Init(&dwRel);<BR>
dwReply = PrimoSDK_GetHandle(&dwHandle);<BR>
<BR>
&#47;&#47; [2] SEE IF DRIVE E: (MUST BE A RECORDER) CONTAINS<BR>
&#47;&#47; A BLANK DISC<BR>
dwUnit = 0x45;<BR>
dwReply = PrimoSDK_UnitReady(dwHandle,&dwUnit);<BR>
dwReply = PrimoSDK_DiscInfoEx(dwHandle,&dwUnit,&dwFlags, &dwMediumType,&dwMediumFormat,&dwErasable,&dwTracks,&dwUsed,&dwFree);<BR>
if ( dwMediumType != PRIMOSDK_BLANK ) {<BR>
MessageBox(hWnd, &quot;We want a blank!&quot;, &quot;PrimoSDK Test&quot;,MB_OK);<BR>
dwReply = PrimoSDK_ReleaseHandle(dwHandle);<BR>
dwReply = PrimoSDK_End();<BR>
break;<BR>
}<BR>
<BR>
&#47;&#47; [3] TEST DRIVE STATUS, RESERVE IF AVAILABLE<BR>
dwReply = PrimoSDK_UnitVxBlock(dwHandle,&dwUnit,PRIMOSDK_TEST,szAppName);<BR>
<BR>
if (dwReply == PRIMOSDK_NOTREADY) &#47;&#47; DRIVE NOT AVAILABLE<BR>
{<BR>
&nbsp;&nbsp;&#47;&#47; ALERT USER THAT DEVICE IS IN USE BY szAppName, END OPERATION<BR>
}<BR>
<BR>
if (dwReply == PRIMOSDK_OK) &#47;&#47; DRIVE IS AVAILABLE<BR>
{<BR>
&nbsp;&nbsp;&#47;&#47; CALL VXBLOCK TO RESERVE THE DRIVE(S).<BR>
&nbsp;&nbsp;dwReply = PrimoSDK_UnitVxBlock(dwHandle, pdwUnit, PRIMOSDK_LOCK, &quot;PrimoSDK Test Application&quot;);<BR>
}<BR>
<BR>
&#47;&#47; [4] BLOCK AIN AND FILE SYSTEM ACTIVITY<BR>
dwReply = PrimoSDK_UnitAIN(dwHandle,&dwUnit,PRIMOSDK_LOCK);<BR>
<BR>
&#47;&#47; [5a] CREATE A NEW AUDIO STRUCTURE<BR>
dwUnits[0] = 0x45;<BR>
dwUnits[1] = 0xFFFFFFFF;<BR>
dwReply = PrimoSDK_NewAudio(dwHandle,dwUnits);<BR>
<BR>
&#47;&#47; [5b] ADD TWO TRACKS<BR>
dwReply = PrimoSDK_AddAudioTrack(dwHandle,&quot;d:\\data\\class\\Chopin.wav&quot;,150,&dwSize);<BR>
dwReply = PrimoSDK_AddAudioTrack(dwHandle,&quot;d:\\data\\waves\\Mina.wav&quot;,150,&dwSize);<BR>
<BR>
&#47;&#47; [6a] START RECORDING<BR>
dwReply = PrimoSDK_WriteAudio(dwHandle,PRIMOSDK_TEST,PRIMOSDK_MAX);<BR>
<BR>
&#47;&#47; [6b] QUERY STATUS WHILE OPERATION IS RUNNING<BR>
while ( PrimoSDK_RunningStatus(dwHandle,PRIMOSDK_GETSTATUS,
 &dwCur,&dwTot) == PRIMOSDK_RUNNING ) {<BR>
wsprintf(szBuf,&quot;Sector %d of %d&quot;,dwCur,dwTot);<BR>
SetDlgItemText(hWnd,IDC_PROGRESS,szBuf);<BR>
Sleep(1000);<BR>
}<BR>
<BR>
&#47;&#47; [6c] BURN COMPLETED; CHECK IF SUCCESSFUL<BR>
dwReply = PrimoSDK_UnitStatus(dwHandle, &dwUnit, &dwCommand, &dwSense, &dwASC, &dwASCQ);<BR>
if (dwReply != PRIMOSDK_OK) {<BR>
&#47;&#47; Notify user that burn failed, providing information<BR>
&#47;&#47; about dwReply and ASC&#47;ASCQ as necessary.<BR>
}<BR>
<BR>
&#47;&#47; [7a] OPEN THE DRIVE TRAY<BR>
dwReply = PrimoSDK_MoveMedium(dwHandle,&dwUnit,
 PRIMOSDK_OPENTRAYEJECT|PRIMOSDK_IMMEDIATE);<BR>
<BR>
&#47;&#47; [7b] CLOSE AUDIO STRUCTURE<BR>
dwReply = PrimoSDK_CloseAudio(dwHandle);<BR>
<BR>
&#47;&#47; [8a] UNBLOCK AIN AND FILE SYSTEM ACTIVITY,<BR>
dwReply = PrimoSDK_UnitAIN(dwHandle,&dwUnit,PRIMOSDK_UNLOCK);<BR>
<BR>
&#47;&#47; [8b] RELEASE DRIVE<BR>
dwReply = PrimoSDK_UnitVxBlock(dwHandle, &dwUnit, PRIMOSDK_UNLOCK, szAppName);<BR>
<BR>
&#47;&#47; [9] RELEASE THE HANDLE AND CLOSE PRIMOSDK<BR>
dwReply = PrimoSDK_ReleaseHandle(dwHandle);<BR>
dwReply = PrimoSDK_End();</P>
<HR SIZE=2 WIDTH="93%"><TABLE width="93%" align=center border=0><TBODY><col><col width=50><TR><TD CLASS="Heading2"><A ID="Trace Logging">3.8 &nbsp;Trace Logging</A></TD><TD class="IndentSansVisited">go: &nbsp;<A HRef="#chapter">top</A></TD></TR></TBODY></TABLE>
<P CLASS="IndentSerif">PrimoSDK&#39;s built-in logging capabilities may be used during development to help determine the result of a given call or set of calls, and may also be utilized to support troubleshooting of end-user issues. PrimoSDK currently supports two distinct types of logging:</P>
<UL CLASS="IndentSerif_List"><LI><B><A ID="PrimoSDK trace">PrimoSDK trace</A></B> &#151; If enabled, all calls to PrimoSDK are logged in the text file &lt;appname&gt;.DBG. May be enabled or disabled at any time. For more information, refer to <A HREF="PS_Guide_6.htm#PrimoSDK_Trace">PrimoSDK_Trace</A>.</LI>
<LI><B><A ID="CDB command trace">CDB command trace</A></B> &#151; traces CDB commands sent to devices and parses error codes (if any). Enabled whenever a file Sonic_px.log is present in the application folder at the time of application launch; logs to that file. </LI></UL>
<P CLASS="IndentSerif"><B>NOTE</B>: CDB command trace is supported in PrimoSDK version 2.0 or higher.<BR>
<BR>
PrimoSDK&#39;s CDB command trace logging has the following characteristics:</P>
<UL CLASS="IndentSerif_List"><LI>The default log file size is 10MB.</LI>
<LI>The log will wrap (the header disappears).</LI>
<LI>The data for the CDB is limited to 40 displayable bytes.</LI>
<LI>&quot; <SPAN CLASS="Courier_New_Inline">&lt</SPAN><SPAN CLASS="_Inline">;-&quot; </SPAN>= data in.</LI>
<LI><SPAN CLASS="_Inline">&quot;- </SPAN><SPAN CLASS="Courier_New_Inline">&gt</SPAN><SPAN CLASS="_Inline">;&quot; </SPAN>= data out.</LI>
<LI>No status = ok.</LI>
<LI>Only errors will be reported subsequent to the command.</LI></UL>
<P CLASS="IndentSerif">The following is an example of CDB command trace logging:</P>
<P CLASS="Code">Px::Cmd [ad 00 00 00 00 00 00 00 08 04 00 00 ] &lt;- (no data)<BR>
Px::Cmd Sense Error = (SC&#47;SQ=30&#47;02) 70 00 05 00 00 00 00 0a 00 00 00 00 30 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 <BR>
Px::Cmd [bb 00 ff ff ff ff 00 00 00 00 00 00 ]  <BR>
Px::Cmd [be 00 00 00 00 00 00 00 01 58 00 00 ] &lt;- 00 00 08 00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 <BR>
Px::Cmd [55 10 00 00 00 00 00 00 14 00 ] -&gt; 00 00 14 00 00 00 00 00 01 0a 21 01 00 00 00 00 00 00 00 00 <BR>
Px::Cmd Sense Error = (SC&#47;SQ=26&#47;00) 70 00 05 00 00 00 00 0a 00 00 00 00 26 00 00 80 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 </P>
<P CLASS="IndentSans"><A HRef= "#chapter">Top</A></P>
</BODY>
</HTML>
